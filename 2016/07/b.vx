#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = translated (load input_path, "[]", "  ")

let addresses = data.lines()

def is_aba (s)
{
	return s[ 0 ] == s[ 2 ] and s[ 0 ] != s[ 1 ]
}

def get_ABAs (segment)
{
	var result = []
	
	let len = segment.length
	
	for i in 0 .. len - 3 do
	{
		let seg = segment[ i -> i + 3 ]
		
		if is_aba seg then
		{
			result <-- seg
		}
	}
	
	return result
}

var count = 0

for addr in addresses do
{
	let segments = [addr / ' ']
	
	let n = half segments.length
	
	let even = 0 .. n map {v * 2}
	let odd  = 0 -> n map {v * 2 + 1}
	
	var good = false
	
	var BABs = str^[]
	
	for s in segments[ odd ] do
	{
		for bab in get_ABAs s do
		{
			BABs[ bab ] = true
		}
	}
	
	if BABs.length == 0 then {continue}
	
	for s2 in segments[ even ] do
	{
		for aba in get_ABAs s2 do
		{
			let bab = aba[[ 1, 0, 1 ]]
			
			if bab in BABs then
			{
				good = true
				break
			}
		}
		
		if good then {break}
	}
	
	if good then {++count}
}

put count
