#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

def checksum (letters)
{
	var histogram = x"00" * 26
	
	for c in letters do
	{
		const i = u8 c - u8 'a'
		
		histogram[ i ] = byte (u8 histogram[ i ] + 1)
	}
	
	var result = ""
	
	for i in 1 .. 5 do
	{
		const max = histogram per Math.max
		
		const j = (begin histogram).find(max).past.size
		
		histogram[ j ] = '\0'
		
		result = result byte (j + u8 'a')
	}
	
	return result
}

const abc = str *('a' .. 'z')

const abc_2 = abc * 2

def decrypt (name, n)
{
	const dst = substr( abc_2, n % 26, 26 )
	
	return translated( name, abc, dst )
}

for room in data do
{
	const len = room.length
	
	const tag = room[ len - 6 -> len - 1 ]
	
	const name-id = room[ 0 -> len - 7 ]
	
	const words = [name-id / '-']
	
	const n = words.length - 1
	
	const id = int words[ n ]
	
	const letters = str words[ 0 -> n ]
	
	if checksum letters == tag then
	{
		const name = join( " ", *words[ 0 -> n ] )
		
		if decrypt( name, id ) == "northpole object storage" then
		{
			print id
			break
		}
	}
}
