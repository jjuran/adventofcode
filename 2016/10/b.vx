#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

var inputs = []

var gates = str^[]

var holding = str^[]
var outputs = str^[]

var doubles = []

def give (bot, value)
{
	if not bot in holding then
	{
		holding[ bot ] = [value]
	}
	else
	{
		if holding[ bot ] then
		{
			doubles <-- bot
		}
		
		holding[ bot ] <-- value
	}
}

def distribute (value, dst)
{
	let (kind, id) = *dst
	
	if kind == "output" then
	{
		outputs[ id ] = value
	}
	else
	{
		give( id, value )
	}
}

for config in data do
{
	let words = [config / ' ']
	
	if words[ 0 ] == "value" then
	{
		let (value, bot) = int words[ 1 ], words[ 5 ]
		
		give( bot, value )
		
		continue
	}
	
	let src = words[ 1 ]
	
	let low  = words[  5 ..  6 ]
	let high = words[ 10 .. 11 ]
	
	gates[ src ] = [ low, high ]
}

while doubles do
{
	let bot = doubles[ 0 ]
	
	doubles = doubles[ 1 -> doubles.length ]
	
	let chips = *holding[ bot ]
	
	let low  = Math.min chips
	let high = Math.max chips
	
	let gate = gates[ bot ]
	
	distribute( low,  gate[ 0 ] )
	distribute( high, gate[ 1 ] )
}

put (outputs[ 0 .. 2 map str ] per Math.product)
