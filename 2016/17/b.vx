#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let data = "vkjiggvb"

def successors (path)
{
	let up   = Iter.popcount translated (path, "DLR", "\0" * 3)
	let down = Iter.popcount translated (path, "ULR", "\0" * 3)
	
	let left  = Iter.popcount translated (path, "UDR", "\0" * 3)
	let right = Iter.popcount translated (path, "UDL", "\0" * 3)
	
	let dx = down - up
	let dy = right - left
	
	let hash = hex md5 data path
	
	let steps =
	[
		"U" (*) (dx > 0 and hash[ 0 ] > 'a'),
		"D" (*) (dx < 3 and hash[ 1 ] > 'a'),
		"L" (*) (dy > 0 and hash[ 2 ] > 'a'),
		"R" (*) (dy < 3 and hash[ 3 ] > 'a'),
	]
	
	if dx + dy == 6 then
	{
		return ()  # We're at the exit
	}
	
	return steps map { path v }
}

def longest_path_length
{
	var distance = 0
	var longest  = 0
	
	var frontier = [ "" ]
	
	while frontier do
	{
		display "" ++distance
		
		var new_frontier = []
		
		for path in frontier do
		{
			let paths = successors path
			
			if paths then
			{
				for path in paths do
				{
					new_frontier <-- path
				}
			}
			else if paths isa () then
			{
				longest = distance
			}
		}
		
		frontier <- new_frontier
	}
	
	return longest - 1
}

let longest = longest_path_length()

display ""

put longest
