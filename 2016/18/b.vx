#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let N = 400000

let data = translated ((load input_path).lines()[ 0 ], ".^", x"00 FF")

# `data` is a string of e.g. ".^^.^.^^^^", semantically a bit vector
# (i.e. b"0110101111"), which we're storing as one byte (00 or FF) per bit.

var odds = packed mince data             # e.g. ".^^^^"  i.e. "01111"
var even = packed mince substr(data, 1)  # e.g. "^..^^"  i.e. "10011"

assert even.size == odds.size

let n = even.size

var total = Iter.popcount data

for i in 1 -> N do
{
	if i mod 2^9 == 0 then
	{
		display "" i
	}
	
	odds, even = x"00" even[ 0 -> n - 1 ] ~ even, odds ~ odds[ 1 -> n ] x"00"
	
	total += Iter.popcount odds + Iter.popcount even
}

total = (2 * n * N - total)

display ""

put total

end.

def generate_odd_from_even (code)
{
	# E.g. "01001" ~ "10011" --> "11010"
	#        ^^^^     ^^^^^       vvvvv
	#        2468     24680       13579
	
	return x"00" code[ 0 -> n - 1 ] ~ code
}

def generate_even_from_odd (code)
{
	# E.g. "01111" ~ "11110" --> "10001"
	#       ^^^^^     ^^^^        vvvvv
	#       13579     3579        24680
	
	return code ~ code[ 1 -> n ] x"00"
}
