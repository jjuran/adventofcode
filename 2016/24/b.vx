#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let grid = load input_path
let lines = grid.lines()
let width = lines[ 0 ].length
let height = lines.length
let stride = width + 1

def neighbors (index)
{
	return
	[
		index - 1, index - stride,
		index + 1, index + stride,
	]
}

let null_wall_maze = translated (grid, "#", "\0")

def dijkstra_map (start)
{
	var dmap = vector[ u16 ] (height * stride)
	
	var distance = 0
	
	var frontier = [ start ]
	
	while frontier do
	{
		++distance  # This introduces a +1 bias so we can test for zero
		
		var new_frontier = []
		
		for index in frontier do
		{
			if not dmap[ index ] then
			{
				dmap[ index ] = distance
				
				for cell in neighbors index do
				{
					if null_wall_maze[ cell ] then
					{
						new_frontier <-- cell  # not a wall
					}
				}
			}
		}
		
		frontier <- new_frontier
	}
	
	return dmap
}

let n_waypoints = Iter.popcount translated (grid, ".#\n", "\0" * 3)

let waypoints = 0 -> n_waypoints map { (begin grid).find(str v).past.length }

def make_distances
{
	var distances = vector[ u16 ] n_waypoints^2
	
	var dist_base = 0
	
	for i in 0 -> n_waypoints do
	{
		display "Mapping " i " of " n_waypoints
		
		let dmap = dijkstra_map waypoints[ i ]
		
		for j in 0 -> n_waypoints do
		{
			distances[ dist_base + j ] = dmap[ waypoints[ j ] ]
			
			if true or i < j then
			{
				let dist = distances[ dist_base + j ] - 1
			}
		}
		
		dist_base += n_waypoints
	}
	
	return distances
}

let distances = make_distances()

let targets = 1 -> n_waypoints map byte per packed

def traveling_salesman (loc=0, remaining=targets)
{
	if remaining.size == n_waypoints - 2 then
	{
		display "Travelling via " loc " of " (n_waypoints - 1)
	}
	
	let dist_base = loc * n_waypoints
	
	def travel (dest_byte)
	{
		let dest = u8 dest_byte
		
		let distance = distances[ dist_base + dest ]
		
		let targets = remaining ver { v != dest_byte }
		
		if not targets then
		{
			return distance + distances[ dest ]
		}
		
		return distance + traveling_salesman (dest, packed targets)
	}
	
	return remaining map travel per Math.min
}

let fewest_steps = traveling_salesman() - n_waypoints

display ""

put fewest_steps
