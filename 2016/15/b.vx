#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let modular = import "modular"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path)

let N = data.lines().length

let bonus = [ N + 1, 11, 0 ]

let digit = '0' .. '9'
let value = digit+ => int

let disc_record =
[
	"Disc #",
	value, " has ",
	value, " positions; at time=0, it is at position ",
	value, ".\n",
]

let schema = (disc_record => {[_]})+

var p = begin data

let initial_discs = [(p += schema), bonus]

var T = 0
var M = 1  # super modulus

for disc in initial_discs do
{
	let (dt, m, k) = *disc
	
	let delay = -(k + T + dt) mod m
	
	T += modular.alignment (delay, m, M)
	M *= m
}

put T
