#!/usr/bin/env minivx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

var password = "abcdefgh"

const N = password.length

def swap_letter (a, b)
{
	const i = (begin password).find(a).past.length
	const j = (begin password).find(b).past.length
	
	password[ i ] = *b
	password[ j ] = *a
}

def swap_position (a, b)
{
	const i = int a
	const j = int b
	
	a = password[ i ]
	b = password[ j ]
	
	password[ i ] = b
	password[ j ] = a
}

def move_position (a, b)
{
	const i = int a
	const j = int b
	
	const i1 = i + 1
	const j1 = j + 1
	
	const c = password[ i ]
	
	if i < j then
	{
		password = password[ 0 -> i ] password[ i1 -> j1 ] c password[ j1 -> N ]
	}
	else
	{
		password = password[ 0 -> j ] c password[ j -> i ] password[ i1 -> N ]
	}
}

def reverse_positions (a, b)
{
	const i = int a
	const j = int b + 1
	
	password = password[ 0 -> i ] -password[ i -> j ] password[ j -> N ]
}

def rotate_left (a, steps_)
{
	const n = int a
	
	password = password[ n -> N ] password[ 0 -> n ]
}

def rotate_right (a, steps_)
{
	const n = N - int a
	
	password = password[ n -> N ] password[ 0 -> n ]
}

def rotate_based (on_, letter)
{
	const index = (begin password).find(letter).past.length
	const n = 1 + index + +(index >= 4)
	
	rotate_right (n % N, "steps")
}

const verbs = str^
[
	:swap_letter,
	:swap_position,
	:move_position,
	:reverse_positions,
	:rotate_left,
	:rotate_right,
	:rotate_based,
]

for operation in data do
{
	const op = [operation / ' ']
	
	verbs[ "_".join *op[[ 0, 1 ]] ] *op[[ 2, op.length - 1 ]]
}

print password
