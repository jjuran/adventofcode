#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

var password = "fbgdceah"

let N = password.length

def swap_letter (a, b)
{
	let i = (begin password).find(a).past.length
	let j = (begin password).find(b).past.length
	
	password[ i ] = *b
	password[ j ] = *a
}

def swap_position (a, b)
{
	let i = int a
	let j = int b
	
	a = password[ i ]
	b = password[ j ]
	
	password[ i ] = b
	password[ j ] = a
}

def move_position (a, b)
{
	a <-> b
	
	let i = int a
	let j = int b
	
	let i1 = i + 1
	let j1 = j + 1
	
	let c = password[ i ]
	
	if i < j then
	{
		password = password[ 0 -> i ] password[ i1 -> j1 ] c password[ j1 -> N ]
	}
	else
	{
		password = password[ 0 -> j ] c password[ j -> i ] password[ i1 -> N ]
	}
}

def reverse_positions (a, b)
{
	let i = int a
	let j = int b + 1
	
	password = password[ 0 -> i ] -password[ i -> j ] password[ j -> N ]
}

def rotate_left (a, steps_)
{
	let n = N - int a
	
	password = password[ n -> N ] password[ 0 -> n ]
}

def rotate_right (a, steps_)
{
	let n = int a
	
	password = password[ n -> N ] password[ 0 -> n ]
}

def rotate_based (on_, letter)
{
	# Forward:
	# 0 >> 1 -> 1
	# 1 >> 2 -> 3
	# 2 >> 3 -> 5
	# 3 >> 4 -> 7
	# 4 >> 6 -> 2
	# 5 >> 7 -> 4
	# 6 >> 0 -> 6
	# 7 >> 1 -> 0
	
	let unbased = [ 1, 1, 6, 2, 7, 3, 0, 4 ]
	
	let index = (begin password).find(letter).past.length
	let n = unbased[ index ]
	
	rotate_right (n % N, "steps")
}

let verbs = str^
[
	:swap_letter,
	:swap_position,
	:move_position,
	:reverse_positions,
	:rotate_left,
	:rotate_right,
	:rotate_based,
]

for operation in -data do
{
	let op = [operation / ' ']
	
	verbs[ "_".join *op[[ 0, 1 ]] ] *op[[ 2, op.length - 1 ]]
}

put password
