#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = ((begin load input_path).find("Use%\n") + "Use%\n").rest.lines()

let digit = '0' .. '9'
let number = digit+ => int
let space = ' '+

let TB = space, number, "T"

let node-grammar = ["/dev/grid/node-x", number, "-y", number, TB (*) 3]

let X = 0
let Y = 1

let Size  = 2
let Used  = 3
let Avail = 4

def parse (line)
{
	var p = (begin line)
	
	return [p += node-grammar]
}

let df_nodes = data map parse

let used_nodes = df_nodes ver { v[ Used ] }

let nodes_by_usage = Iter.sorted (used_nodes map { v[ Used  ] })
let nodes_by_avail = Iter.sorted (df_nodes   map { v[ Avail ] })

let n_used  = nodes_by_usage.length
let n_avail = nodes_by_avail.length

var p_used  = begin nodes_by_usage
var p_avail = begin nodes_by_avail

var i_avail = 0

var n_viable = 0

while p_used and p_avail do
{
	if *p_used <= *p_avail then
	{
		n_viable += n_avail - i_avail
		
		++p_used
	}
	else
	{
		++p_avail
		++i_avail
	}
}

let n_false_positives = used_nodes pop {v[ Used ] <= v[ Avail ]}

n_viable -= n_false_positives

put n_viable
