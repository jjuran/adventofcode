#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let min = Math.min
let max = Math.max

let keys = translated (str (mince substr( DATA, 1 )).lines(), " ", "\0")

def get (x, y)
{
	let range = 0 -> 5
	
	return x in range and y in range and keys[ y * 5 + x ]
}

var x = 0
var y = 2

let dirs = byte^
[
	'L': { get( x - 1, y ) and (x = x - 1) },
	'R': { get( x + 1, y ) and (x = x + 1) },
	'U': { get( x, y - 1 ) and (y = y - 1) },
	'D': { get( x, y + 1 ) and (y = y + 1) },
]

var code = ""

for instruction in data do
{
	for step in instruction do
	{
		dirs[ step ]()
	}
	
	let index = y * 5 + x
	
	code .= keys[ [index] ]
}

put code

end.
|    1    |
|  2 3 4  |
|5 6 7 8 9|
|  A B C  |
|    D    |
