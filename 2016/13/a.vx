#!/usr/bin/env vx

const data = 1364

const X = 31
const Y = 39

var width  = X + 1
var height = Y + 1
var stride = width + 1

def bitstrings { _ map { v "\0", v "x" } }

const binary-strings = bitstrings^8 [ "" ]

def binarize (x)
{
	const bits = unhex hex x map { binary-strings[ int v ] }
	
	return str bits
}

def is_wall (x, y)
{
	return Iter.popcount binarize (x^2 + 3 * x + 2 * x * y + y + y^2 + data) % 2
}

def neighbors (x, y)
{
	return
	[
		[x, y - 1], [x - 1, y],
		[x, y + 1], [x + 1, y],
	]
	ver { not (v ver { v < 0 }) }
}

def shortest_distance (x, y, X, Y)
{
	var dmap = x"00" * (height * stride)
	
	var distance = 0
	
	var frontier = [ [x, y] ]
	
	while frontier do
	{
		++distance  # This introduces a +1 bias so we can test for zero
		
		var new_frontier = []
		
		for coords in frontier do
		{
			const (x, y) = *coords
			
			if y == height then
			{
				dmap .= x"00" * stride
				
				++height
			}
			else if x == width then
			{
				dmap = [dmap / height] map { v x"00" } per packed
				
				++width
				++stride
			}
			
			const i = x + y * stride
			
			if not dmap[ i ] then
			{
				if x "," y == X "," Y then
				{
					return distance - 1
				}
				
				dmap[ i ] = byte distance
				
				for xy in neighbors (x, y) do
				{
					if not is_wall *xy then
					{
						new_frontier <-- xy
					}
				}
			}
		}
		
		frontier <- new_frontier
	}
	
	return ()
}

print shortest_distance (1, 1, X, Y)
