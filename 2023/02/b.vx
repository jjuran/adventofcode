#!/usr/bin/env minivx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let colors = ["red green blue" / ' ']

let digit = '0' .. '9'

let number = digit+ => int

let color = [colors per {a | b}] => str

let count = [number, ' ', color] => {tail _ => head _}
let subset = [count, [", ", count]*] => {str^[_]}
let samples = [subset, ["; ", subset]*] => {[_]}

let grammar = ["Game ", digit+, ": ", samples]

def parse (line)
{
	var p = begin line
	
	return p += grammar
}

def get (subset, color)
{
	return if color in subset then {subset[ color ]}
}

def max_color_count (samples, color)
{
	return samples map { get (v, color) } per Math.max
}

def minimum_power (samples)
{
	return colors map { max_color_count (samples, v) } per {a * b}
}

let sum = data map minimum_power * parse per {a + b}

print sum
