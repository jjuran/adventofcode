#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let lines = data.lines()

let width = lines[ 0 ].length

let height = lines.length

let stride = width + 1

def get_column (x)
{
	return 0 -> height map { lines[ v ][ x ] } per str
}

let columns = 0 -> width map { get_column v }

let col_empty = 0 -> width  map { byte u8 not '#' in columns[ v ] } per str
let row_empty = 0 -> height map { byte u8 not '#' in lines[   v ] } per str

let expansion_factor = 1000000
let expansion_addend = expansion_factor - 1

def find_galaxies
{
	var result = []
	
	var p = begin data
	
	while p = p.find '#' do
	{
		let index = p.past.length
		
		let y = index div stride
		let x = index mod stride
		
		result <-- [x, y]
		
		++p
	}
	
	return result
}

def distance (a, b)
{
	var x0 = a[ 0 ]
	var x1 = b[ 0 ]
	var y0 = a[ 1 ]
	var y1 = b[ 1 ]
	
	if x0 > x1 then { x0 <-> x1 }
	if y0 > y1 then { y0 <-> y1 }
	
	let dx = x1 - x0 + expansion_addend * Iter.popcount col_empty[ x0 -> x1 ]
	let dy = y1 - y0 + expansion_addend * Iter.popcount row_empty[ y0 -> y1 ]
	
	return dx + dy
}

let galaxies = find_galaxies()

let n = galaxies.length

var sum = 0

for i in 0 -> n do
{
	for j in i + 1 -> n do
	{
		sum += distance (galaxies[ i ], galaxies[ j ])
	}
}

print sum
