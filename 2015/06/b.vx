#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const display = (import "status") { OUT <== _ }

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

const grid-row = record( size: 1000, encode: ..., decode: ... )

var light-grid = vector[ grid-row ] 1000

def point (x_comma_y)
{
	return [x_comma_y / ','] map int
}

def get-coords (xy_through_xy)
{
	const parts = [xy_through_xy / ' '][[0, 2]]
	
	return parts map point
}

def turn-on (row, x0, x1)
{
	#assert not '\xff' in row[ x0 -> x1 ]
	
	const affected = row[ x0 -> x1 ] map {byte (u8 _ + 1)}
	
	return row[ 0 -> x0 ] (packed affected) row[ x1 -> 1000 ]
}

def turn-off (row, x0, x1)
{
	const affected = row[ x0 -> x1 ] map {_ and byte (u8 _ - 1)}
	
	return row[ 0 -> x0 ] (packed affected) row[ x1 -> 1000 ]
}

def toggle (row, x0, x1)
{
	#assert not '\xff' in row[ x0 -> x1 ]
	#assert not '\xfe' in row[ x0 -> x1 ]
	
	const affected = row[ x0 -> x1 ] map {byte (u8 _ + 2)}
	
	return row[ 0 -> x0 ] (packed affected) row[ x1 -> 1000 ]
}

const n = data.length
var ii = 0

for step in data do
{
	const action
	const target
	
	const c = step[ 6 ]
	
	if c == 'f' then
	{
		action = turn-off
		target = substr( step, 9 )
	}
	else if c == 'n' then
	{
		action = turn-on
		target = substr( step, 8 )
	}
	else
	{
		action = toggle
		target = substr( step, 7 )
	}
	
	const coords = get-coords target
	
	const pt0, const pt1 = *coords
	
	const x0, const y0 = *pt0
	const x1, const y1 = *pt1
	
	display (++ii "/" n)
	
	for i in y0 .. y1 do
	{
		light-grid[ i ] = action( light-grid[ i ], x0, x1 + 1 )
	}
}

display ""

var total = 0

for i in 0 -> 1000 do
{
	const row = light-grid[ i ]
	
	for j in row do
	{
		total += u8 j
	}
}

print total
