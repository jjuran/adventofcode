#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const permute = (import "permute").permute

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

const T = str => int

var names = str^[]
var subscores = str^[]

for row in data do
{
	const words = [row[ 0 -> row.length - 1 ] / ' ']
	
	const A = words[ 0 ]
	const B = words[ 10 ]
	const k = int (words[ 2 ][ 0 ] == 'g') * 2 - 1
	const n = int words[ 3 ] * k
	
	names[ A ] = null
	names[ B ] = null
	
	subscores[ A "-" B ] = n
}

for A in names.keys do
{
	subscores[ "-" A ] = 0
	subscores[ A "-" ] = 0
	
	for B in names.keys do
	{
		if A >= B then
		{
			continue
		}
		
		const ab = A "-" B
		const ba = B "-" A
		
		const sum = subscores[ ab ] + subscores[ ba ]
		
		subscores[ ab ] = sum
		subscores[ ba ] = sum
	}
}

const first = ""
const count = names.length

def score (order)
{
	const subtotal = subscores[ first "-" order[ 0 ] ]
	               + subscores[ first "-" order[ count - 2 ] ]
	
	order <-- first
	
	order = [first, *order]
	
	const keys = 0 -> count map { "-".join *order[[v, v + 1]] }
	
	return keys map { subscores[ v ] } per Math.sum
}

const scores = permute names.keys[ 0 -> count ] map score

print Iter.max scores
