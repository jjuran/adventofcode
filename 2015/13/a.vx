#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let permute = (import "permute").permute

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let T = str => int

var names = str^[]
var subscores = str^[]

for row in data do
{
	let words = [row[ 0 -> row.length - 1 ] / ' ']
	
	let A = words[ 0 ]
	let B = words[ 10 ]
	let k = int (words[ 2 ][ 0 ] == 'g') * 2 - 1
	let n = int words[ 3 ] * k
	
	names[ A ] = null
	names[ B ] = null
	
	subscores[ A "-" B ] = n
}

for A in names.keys do
{
	for B in names.keys do
	{
		if A >= B then
		{
			continue
		}
		
		let ab = A "-" B
		let ba = B "-" A
		
		let sum = subscores[ ab ] + subscores[ ba ]
		
		subscores[ ab ] = sum
		subscores[ ba ] = sum
	}
}

let first = names.keys[ 0 ]
let count = names.length

def score (order)
{
	let subtotal = subscores[ first "-" order[ 0 ] ]
	             + subscores[ first "-" order[ count - 2 ] ]
	
	order <-- first
	
	order = [first, *order]
	
	let keys = 0 -> count map { "-".join *order[[v, v + 1]] }
	
	return keys map { subscores[ v ] } per Math.sum
}

let scores = permute names.keys[ 1 -> count ] map score

put Iter.max scores
