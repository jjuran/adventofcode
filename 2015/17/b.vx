#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let total_eggnog = 150

let container_sizes = (load input_path).lines() map int
let container_count = container_sizes.length

let limit = 2^container_count

var bitmask = 0

def in_bitmask (index)
{
	return bitmask div 2^index mod 2
}

var solutions = 0
var min_count = container_count

while ++bitmask < limit do
{
	let current_indices = 0 -> container_count ver in_bitmask
	
	if current_indices.length <= min_count then
	{
		if container_sizes[ current_indices ] per Math.sum == total_eggnog then
		{
			if current_indices.length < min_count then
			{
				min_count = current_indices.length
				
				solutions = 0
			}
			
			++solutions
		}
	}
	
	if bitmask mod 256 == 0 then
	{
		display "" solutions " of size " min_count " (" bitmask "/" limit ")"
	}
}

display ""

put solutions
