#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

const n = data.length - 2

const upper = 'A' .. 'Z'
const lower = 'a' .. 'z'
const alpha = upper | lower

const word = alpha+ => str

const molecule = data[ n + 1 ]
var   patterns = str^[]

for replacement in data[ 0 -> n ] do
{
	var p = begin replacement
	
	const (atom, submolecule) = p += [word, " => ", word]
	
	if not atom in patterns then
	{
		patterns[ atom ] = [ submolecule ]
	}
	else
	{
		patterns[ atom ] <-- submolecule
	}
}

var new_molecules = []

var p = begin molecule

while p do
{
	const q = p
	
	const atom = p += [upper, lower?] => str
	
	if atom in patterns then
	{
		const substitutes = patterns[ atom ]
		
		for s in substitutes do
		{
			new_molecules <-- q.past s p.rest
		}
	}
}

def count_distinct (sequence)
{
	var count = 1
	
	var p = begin Iter.sorted sequence
	var q = p
	
	while ++q do
	{
		if *p != *q then
		{
			++count
		}
		
		p = q
	}
	
	return count
}

print count_distinct new_molecules
