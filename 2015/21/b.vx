#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const digit = '0' .. '9'
const upper = 'A' .. 'Z'
const lower = 'a' .. 'z'
const alpha = upper | lower
const alnum = alpha | digit
const title = (alpha | ' ')+ => str
const value = digit+ => int
const field = [title, ": ", value] => { head _ => tail _ }
const sheet = [field, "\n"]+ => { str^[ _ ] }

def parse_stats (text)
{
	var p = begin text
	
	return p += sheet
}

const boss_stats_table = parse_stats load input_path

const boss_stats = boss_stats_table[[ "Hit Points", "Damage", "Armor" ]]

def stat (s)
{
	var p = begin s
	
	p += ' '*
	
	return p += digit+ => int
}

def subparse_aisle
{
	const headings =   head _
	const listings = [ tail _ ]
	
	var column_names   = []
	var column_offsets = []
	
	var start = begin headings
	
	var p = start
	p = p.find ':'
	
	const section = p - start
	
	p += ':'
	
	while p += ' '+ do
	{
		column_offsets <-- p.past.length
		column_names   <-- (p += alpha+ => str)
	}
	
	const n_columns = column_names.length
	
	const offsets = column_offsets
	
	const items = listings map
	{
		const listing = v
		
		const name = listing[ 0 -> offsets[ 0 ] ]
		
		const stats = 0 -> n_columns map { stat substr (listing, offsets[ v ]) }
		
		name => stats,
	}
	
	return section => items
}

const heads =  [upper, (alnum | ' ' | ':')+, '\n'] => str
const items = ([upper, (alnum | ' ' | '+')+, '\n'] => str)+
const aisle = ['\n', heads, items] => subparse_aisle
const store = aisle+

def parse_store (text)
{
	var p = begin text
	
	return p += store
}

const weapons, const armors, const rings = *([parse_store DATA] map .value)

const Player = 0

def battle (stats)
{
	var whose_turn = Player
	
	def damage (attacker, defender)
	{
		const damage = stats[ attacker ][ 1 ]
		const armor  = stats[ defender ][ 2 ]
		
		return Math.max (damage - armor, 1)
	}
	
	def turn ()
	{
		const attacker = whose_turn
		const defender = 1 - whose_turn
		
		const damaged = damage (attacker, defender)
		
		const hp = stats[ defender ][ 0 ] -= damaged
		
		if hp <= 0 then
		{
			return attacker
		}
		
		whose_turn = defender
		
		return -1
	}
	
	while (var winner = turn()) < 0 do {}
	
	return winner
}

def boss_battle (damage, armor)
{
	const player_stats = [100, damage, armor]
	
	return battle [ player_stats, boss_stats ]
}

const n_weapons = 5
const n_armors  = 6  # because it's optional
const n_rings   = 7  # ditto

const max_configs = n_weapons * n_armors * n_rings^2

var losses = []

for config in 0 -> max_configs do
{
	var x = config
	
	const R1 = x mod n_rings - 1;  x = x div n_rings
	const R2 = x mod n_rings - 1;  x = x div n_rings
	
	if R2 >= 0 and R2 >= R1 then
	{
		continue
	}
	
	const Ar = x mod n_armors - 1;  x = x div n_armors
	const We = x
	
	const weapon = weapons[ We ]
	const armor  = if Ar >= 0 then {armors[ Ar ]}
	const ring1  = if R1 >= 0 then {rings[ R1 ]}
	const ring2  = if R2 >= 0 then {rings[ R2 ]}
	
	const outfit = [ weapon, armor, ring1, ring2 ]
	
	const stats = 0 -> 3 map { const i = v; outfit map { v.value[ i ] } per Math.sum }
	
	const winner = boss_battle (*stats[ 1 .. 2 ])
	
	if winner != Player then
	{
		losses <-- stats[ 0 ]
	}
}

print Iter.max losses

end.

Weapons:    Cost  Damage  Armor
Dagger        8     4       0
Shortsword   10     5       0
Warhammer    25     6       0
Longsword    40     7       0
Greataxe     74     8       0

Armor:      Cost  Damage  Armor
Leather      13     0       1
Chainmail    31     0       2
Splintmail   53     0       3
Bandedmail   75     0       4
Platemail   102     0       5

Rings:      Cost  Damage  Armor
Damage +1    25     1       0
Damage +2    50     2       0
Damage +3   100     3       0
Defense +1   20     0       1
Defense +2   40     0       2
Defense +3   80     0       3
