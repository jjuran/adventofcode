#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

var signals = str^[]
var circuit = str^[]

for instruction in data do
{
	const words = [instruction / ' ']
	
	var n = words.length
	
	const wire = words[ --n ]
	
	const input = words[ 0 -> --n ]
	
	circuit[ wire ] = input
}

def NOT (x) { u16.decode ~(u16.encode x) }

def AND (a, b)
{
	return u16.decode (u16.encode a & u16.encode b)
}

def OR (a, b)
{
	return u16.decode (u16.encode a | u16.encode b)
}

def LSHIFT (signal, n)
{
	return u16 (signal * 2^n)
}

def RSHIFT (signal, n)
{
	return half^n signal
}

const binary-ops = str^
[
	AND: AND,
	OR: OR,
	LSHIFT: LSHIFT,
	RSHIFT: RSHIFT,
]

def chase (trace)
{
	try
	{
		return int trace
	}
	catch {}
	
	const wire = trace
	
	if wire in signals then
	{
		return signals[ wire ]
	}
	
	const input = circuit[ wire ]
	
	const n = input.length
	
	if n == 1 then
	{
		const signal = chase input[ 0 ]
		
		return signals[ wire ] = signal
	}
	
	if n == 2 then
	{
		const signal = NOT chase input[ 1 ]
		
		return signals[ wire ] = signal
	}
	
	const operator = input[ 1 ]
	
	const a = chase input[ 0 ]
	const b = chase input[ 2 ]
	
	const signal = binary-ops[ operator ] (a, b)
	
	return signals[ wire ] = signal
}

const signal = chase "a"

signals = str^[ b: signal ]

print chase "a"
