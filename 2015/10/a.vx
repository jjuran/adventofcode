#!/usr/bin/env lvx

const data = "1113122113"

var memo = str^[]

def split (s: str)
{
	var result = []
	
	var p = begin s
	
	var q = p
	
	while p = p.find "231" do
	{
		++p
		
		result <-- p - q
		
		q = p
	}
	
	result <-- q.rest
	
	return result
}

def look-and-say (s: str)
{
	if s in memo then
	{
		return *memo[ s ]
	}
	
	var result = ""
	
	var p = begin s
	
	while p do
	{
		const q = p
		const c = *p++
		
		p += c*
		
		result .= (p - q).length c ""
	}
	
	return *(memo[ s ] = split result)
}

var x = [data => 1]

for i in 1 .. 40 do
{
	var freq = str^[]
	
	for element in x do
	{
		let results = look-and-say element.key
		
		for r in [results] do
		{
			if not r in freq then
			{
				freq[ r ] = 0
			}
			
			freq[ r ] += element.value
		}
	}
	
	x <- freq
}

let n = x map { v.key.length * v.value } per Math.sum

print n
