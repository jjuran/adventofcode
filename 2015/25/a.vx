#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let modular = import "modular"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let digit = '0' .. '9'
let number = digit+ => int

var p = begin load input_path

p = p.find "row"

let (row, col) = p += ["row ", number, ", column ", number]

def summation (max)
{
	let mid = max div 2
	let odd = max mod 2
	
	return (1 + odd + max) * mid + odd
}

def diagonalize (row, col)
{
	--row
	--col
	
	return col + summation (row + col)
}

let seed    = 20151125
let factor  = 252533
let modulus = 33554393

def generate_nth_code (index)
{
	return seed * modular.power( factor, index, modulus ) % modulus
}

put generate_nth_code diagonalize (row, col)
