#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

def mapify (k, v) { k => v }

let alpha = 'A' .. 'Z' | 'a' .. 'z'
let digit = '0' .. '9'
let number = ['-'?, digit+] => int
let word = alpha+

let property = [ word, " ", number ]
let proplist = [ property, [", ", property]* ]
let ingredient = [ word => str, ": ", proplist => { [_] } ] => mapify
let ingredlist = [ingredient, '\n']+ => { str^[_] }

var p = begin data

let ingredients = p += ingredlist

let n_properties = 4
let n_ingredients = ingredients.length
let v_ingredients = ingredients.values
let i_ingredients = 0 -> n_ingredients

assert n_ingredients == 4

def calc_property (recipe, i)
{
	return Math.max( i_ingredients map { recipe[ v ] * v_ingredients[ v ][ i ] }
	                               per Math.sum,
	                 0 )
}

def cookie_score (recipe)
{
	return 0 -> n_properties map calc_property % recipe per Math.product
}

var best_recipe = [0 (*) n_ingredients]
var best_score = 0

for i in 1 -> 100 - 1 - 1 - 1 do
{
	display ("i = " i ", best is " rep(best_recipe) ": " best_score)
	
	for j in 1 -> 100 - i - 1 - 1 do
	{
		for k in 1 -> 100 - i - j - 1 do
		{
			let l = 100 - i - j - k
			
			let recipe = [i, j, k, l]
			
			let score = cookie_score recipe
			
			if score > best_score then
			{
				best_score  = score
				best_recipe = recipe
			}
		}
	}
}

display ""

put best_score
