#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let width = ((begin data).find '\n').past.length
let stride = width + 1

let blank_line = (" " * width) "\n"

var grid (str) = "\r" blank_line data blank_line

let neighbor_offsets = -1 .. 1 map { v - stride, v, v + stride } ver ...

def count_neighbors (index)
{
	return neighbor_offsets pop {grid[ index + v ] == '#'}
}

def step
{
	var new_grid (str) = grid
	
	for i in 0 -> width do
	{
		for j in 0 -> width do
		{
			let index (int) = 1 + j + (1 + i) * stride
			
			let n (int) = count_neighbors index
			
			if n != 2 then
			{
				new_grid[ index ] = ".#"[+(n == 3)]
			}
		}
	}
	
	grid = take new_grid
}

for i in 0 -> 100 do
{
	display i "/100"
	
	step()
}

let count = grid pop {v == '#'}

display ""

put count
