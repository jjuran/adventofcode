#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let program = data[ 1 -> data.length ]

let init   = ???
let factor = ???

for line in program do
{
	let mnemonic = line[ 0 -> 4 ]
	let operands = [substr (line, 5) / ' '] map int
	
	let (a, b), ... = *operands
	
	if mnemonic == "muli" and b > 2^16 then
	{
		factor = b
	}
	
	if mnemonic == "seti" and a > 2^16 then
	{
		init = a
	}
}

def successor (seed)
{
	if seed div 2^16 mod 2 == 0 then
	{
		seed += 2^16
	}
	
	var base = init
	
	for i in 1 .. 3 do
	{
		base += seed mod 256
		base *= factor
		
		seed = seed div 256
		base = base mod 2^24
	}
	
	return base
}

var seen = vector[byte] 2^24
var seed = 0

while true do
{
	var next = successor seed
	
	if seen[ next ] then
	{
		break
	}
	
	seen[ next ] = 'x'
	
	seed = next
}

put seed
