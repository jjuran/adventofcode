#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let n_lines = data.length

let IP_reg = int substr (data[ 0 ], "#ip ".length)

let program = data[ 1 -> n_lines ]

let n_instructions = n_lines - 1

def AND (a, b)
{
	return u32.decode (u32.encode u32 a & u32.encode u32 b)
}

def OR (a, b)
{
	return u32.decode (u32.encode u32 a | u32.encode u32 b)
}

def GT (a, b)
{
	return u8 (a > b)
}

def EQ (a, b)
{
	return u8 (a == b)
}

let imm = ...

var registers = [ 0 (*) 6 ]

def reg (i) { registers[ i ] }

let instruction_set = str^
[
	addr: [ reg, reg, Math.sum ],
	addi: [ reg, imm, Math.sum ],
	mulr: [ reg, reg, Math.product ],
	muli: [ reg, imm, Math.product ],
	banr: [ reg, reg, AND ],
	bani: [ reg, imm, AND ],
	borr: [ reg, reg, OR ],
	bori: [ reg, imm, OR ],
	setr: [ reg, ..., head ],
	seti: [ imm, ..., head ],
	gtrr: [ reg, reg, GT ],
	gtri: [ reg, imm, GT ],
	gtir: [ imm, reg, GT ],
	eqrr: [ reg, reg, EQ ],
	eqri: [ reg, imm, EQ ],
	eqir: [ imm, reg, EQ ],
]

var IP = 0

let last_address = n_instructions - 1

while IP < last_address do
{
	registers[ IP_reg ] = IP
	
	let line = program[ IP ]
	
	let mnemonic = line[ 0 -> 4 ]
	let operands = [substr (line, 5) / ' '] map int
	
	let (mode1, mode2, f) = *instruction_set[ mnemonic ]
	
	let (a, b, c) = *operands
	
	registers[ c ] = f (mode1 a, mode2 b)
	
	IP = registers[ IP_reg ] + 1
}

put Iter.max registers
