#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]

const data = Iter.sorted (load bindir "/4.txt").lines()

var guards = int^[]
var sleeps = []

var guard

var sleep_time

for row in data do
{
	const minute = int row[ 15 -> 17 ]
	
	const code = row[ 19 ]
	
	if code == 'G' then
	{
		guard = int [substr( row, 26 ) / ' '][ 0 ]
		
		guards[ guard ] = []
	}
	
	if code == 'f' then
	{
		sleep_time = minute
	}
	
	if code == 'w' then
	{
		sleeps <-- guard => [sleep_time, minute]
	}
}

def sleepiest_minute (guard)
{
	const guard_sleeps = sleeps ver {v.key == guard} map {v.value}
	
	var minutes = [0 (*) 60]
	
	for zzz in guard_sleeps do
	{
		for z in zzz[0] -> zzz[1] do
		{
			++minutes[ z ]
		}
	}
	
	return (Iter.max (0 -> 60 map { v => minutes[ v ] }) via {v.value})
}

const frequent_sleeps = guards.keys map { v => sleepiest_minute v }

const maximum = Iter.max frequent_sleeps via {v.value.value}

const sleeper = maximum.key
const minute  = maximum.value.key

print (sleeper * minute)
