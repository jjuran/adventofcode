#!/usr/bin/env vx

const serial_number = int (getenv "INPUT" or 9005)

const edge  = 300
const edge2 = edge - 2

var grid     = x"00" * edge^2
var row_sums = x"00" * edge2 * edge
var all_sums = x"00" * edge2^2

def hundreds (x)
{
	return x mod 1000 div 100
}

def compute_power_level (x, y)
{
	const rack_id = x + 10
	
	return hundreds ((rack_id * y + serial_number) * rack_id)
}

var src = 0
var dst = 0

for i in 1 .. edge do
{
	for j in 1 .. edge do
	{
		grid[ dst ] = byte compute_power_level( j, i )
		
		++dst
	}
}

src = 0
dst = 0

for ii in 0 -> edge do
{
	for j in 0 -> edge2 do
	{
		row_sums[ dst ] = byte (grid[ src -> src + 3 ] map i8 per Math.sum)
		
		++src
		++dst
	}
	
	src += 2
}

src = 0
dst = 0

for iii in 0 -> edge2 do
{
	for j in 0 -> edge2 do
	{
		var sum = 0
		
		sum += i8 row_sums[ src ]
		sum += i8 row_sums[ src + edge2 ]
		sum += i8 row_sums[ src + edge2 * 2]
		
		all_sums[ dst ] = byte sum
		
		++src
		++dst
	}
}

const mappings = 0 -> all_sums.size map { v => all_sums[ v ] }

const max = Iter.max mappings via { v.value }

const index = max.key

print (1 + index mod edge2, ",", 1 + index div edge2)
