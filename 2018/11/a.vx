#!/usr/bin/env minivx

let serial_number = int (getenv "INPUT" or 9005)

let edge  = 300
let edge2 = edge - 2

var grid     = x"00" * edge^2
var row_sums = x"00" * edge2 * edge
var all_sums = x"00" * edge2^2

var src = 0
var dst = 0

for i in 1 .. edge do
{
	for j in 1 .. edge do
	{
		let rack_id = j + 10
		
		let power = (rack_id * i + serial_number) * rack_id
		
		grid[ dst ] = byte (power mod 1000 div 100)
		
		++dst
	}
}

src = 0
dst = 0

for ii in 0 -> edge do
{
	for j in 0 -> edge2 do
	{
		row_sums[ dst ] = byte (i8 grid[ src ] +
		                        i8 grid[ src + 1 ] +
		                        i8 grid[ src + 2 ])
		
		++src
		++dst
	}
	
	src += 2
}

src = 0
dst = 0

for iii in 0 -> edge2 do
{
	for j in 0 -> edge2 do
	{
		all_sums[ dst ] = byte (i8 row_sums[ src ] +
		                        i8 row_sums[ src + edge2 ] +
		                        i8 row_sums[ src + edge2 * 2 ])
		
		++src
		++dst
	}
}

let mappings = 0 -> all_sums.size map { v => all_sums[ v ] }

let max = Iter.max mappings via .value

let index = max.key

print (1 + index mod edge2, ",", 1 + index div edge2)
