#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines() map int

let extent = 2^20
let offset = extent div 2

var seen = x"00" * extent

var freq = 0

def shift (s, delta)
{
	let n = s.size
	
	if delta < 0 then
	{
		return s[ -delta -> n ] (x"00" * -delta)
	}
	else
	{
		return (x"00" * delta) s[ 0 -> n - delta ]
	}
}

def mark_seen
{
	for d in data do
	{
		freq += d
		
		let i = freq + offset
		
		if seen[ i ] then
		{
			return true
		}
		
		seen[ i ] = '\xFF'
	}
	
	return false
}

let already_done = mark_seen()

if not already_done and freq != 0 then
{
	let delta = freq
	
	var initially_seen = seen
	
	while true do
	{
		initially_seen = shift (initially_seen, delta)
		
		if '\xFF' in seen & initially_seen then
		{
			break
		}
		
		seen |= initially_seen
		
		freq += delta
	}
	
	mark_seen()
}

put freq
