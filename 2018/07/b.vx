#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

var prereqs = byte^[]

for row0 in data do
{
	let a = row0[  5 ]
	let b = row0[ 36 ]
	
	prereqs[ a ] =
	prereqs[ b ] = []
}

for row in data do
{
	let a = row[  5 ]
	let b = row[ 36 ]
	
	prereqs[ b ] <-- a
}

def next
{
	return prereqs ver {v.value.length == 0} map .key per Math.min
}

let N = 5

var assigned = "\0" * N

var timers = []

def idle_worker
{
	let p = begin assigned
	let q = p.find '\0'
	
	return
	if q then
	{
		(q - p).length,
	}
	else
	{
		-1,
	}
}

def timeof (step)
{
	return u8 step - u8 'A' + 61
}

var T = 0

def assign (worker, step)
{
	assigned[ worker ] = step
	
	timers <-- worker => T + timeof step
	
	prereqs = prereqs ver {v.key != step}
}

def tick
{
	T = timers map .value per Math.min
	
	for t in (timers ver {v.value == T}) do
	{
		let worker = t.key
		let step = assigned[ worker ]
		
		assigned[ worker ] = '\0'
		
		prereqs = prereqs map {v.key => v.value ver {v != step}}
	}
	
	timers = timers ver { v.value != T }
}

while prereqs do
{
	while var step = next() do
	{
		let worker = idle_worker()
		
		if worker < 0 then
		{
			tick()
		}
		else
		{
			assign( worker, step )
		}
	}
	
	tick()
}

put T
