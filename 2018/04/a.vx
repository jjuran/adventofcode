#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = Iter.sorted (load input_path).lines()

var guards = int^[]
var sleeps = []

var guard

var sleep_time

for row in data do
{
	let minute = int row[ 15 -> 17 ]
	
	let code = row[ 19 ]
	
	if code == 'G' then
	{
		guard = int [substr( row, 26 ) / ' '][ 0 ]
		
		guards[ guard ] = []
	}
	
	if code == 'f' then
	{
		sleep_time = minute
	}
	
	if code == 'w' then
	{
		sleeps <-- guard => [sleep_time, minute]
	}
}

def total_sleep (guard)
{
	return (sleeps ver {v.key == guard} map {v.value[1] - v.value[0]} per Math.sum) or 0
}

def sleepiest_minute (guard)
{
	let guard_sleeps = sleeps ver {v.key == guard} map .value
	
	var minutes = [0 (*) 60]
	
	for zzz in guard_sleeps do
	{
		for z in zzz[0] -> zzz[1] do
		{
			++minutes[ z ]
		}
	}
	
	return ((Iter.max (0 -> 60 map { v => minutes[ v ] }) via .value)).key
}

let total_sleeps = guards.keys map { v => total_sleep v }

let sleeper = (Iter.max total_sleeps via .value).key

put (sleeper * sleepiest_minute sleeper)
