#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

var grid = load input_path

let N = 10

let width = (begin grid).find('\n').past.length
let stride = width + 1

let blank = (" " * width) "\n"

grid = " " blank grid blank

let indices = 1 + stride -> grid.length - stride - 1

def open (neighbors)
{
	let n_trees = neighbors pop { v == '|' }
	
	return ".|"[ +(n_trees >= 3) ]
}

def wood (neighbors)
{
	let n_yards = neighbors pop { v == '#' }
	
	return "|#"[ +(n_yards >= 3) ]
}

def yard (neighbors)
{
	let has_yard = neighbors pop { v == '#' }
	let has_tree = neighbors pop { v == '|' }
	
	return ".#"[ has_yard and has_tree and 1 or 0 ]
}

let states = byte^
[
	'.': open,
	'|': wood,
	'#': yard,
	' ': {' '},
	'\n': {'\n'},
]

def smear (x)
{
	return *(-1 .. 1 map {x + v})
}

let offsets = -1 .. 1 map { v * stride } map smear ver ...

def change
{
	var temp = " " * grid.length
	
	for i in indices do
	{
		temp[ i ] = states[ grid[ i ] ] (offsets map { grid[ i + v ] } per str)
	}
	
	grid <- temp
}

for T in 1 .. N do
{
	display T "/" N
	
	change()
}

def count (c)
{
	return grid.length - Iter.popcount translated (grid, "" c, "\0")
}

display ""

let value = "|#" map count per Math.product
put value
