#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let N = 50 * 10^9

let initial_state = substr (data[ 0 ], "initial state: ".length)

var state = "..." initial_state "..."
var origin = 3

let rules_dictionary = data[ 2 -> data.length ] map { v[ 0 -> 5 ] => v[ 9 ] }

def make_rules (dictionary)
{
	var rules = "." * 32
	
	for entry in dictionary do
	{
		let i = unbin "0b" translated (entry.key, ".#", "01")
		
		rules[ i ] = entry.value
	}
	
	return rules
}

let rules = make_rules rules_dictionary

var n_iterations = 0

def iterate
{
	var next_state = state
	
	for i in 2 -> state.length - 2 do
	{
		let subseq = state[ i - 2 .. i + 2 ]
		
		let key = unbin "0b" translated (subseq, ".#", "01")
		
		next_state[ i ] = rules[ key ]
	}
	
	let pad_left  = next_state[ 2 ] == '#'
	let pad_right = next_state[ state.length - 3 ] == '#'
	
	next_state = ("." * pad_left) next_state ("." * pad_right)
	
	origin += +pad_left
	
	if next_state[ 0 -> 4 ] == "...." then
	{
		next_state = substr (next_state, 1)
		
		--origin
	}
	
	state <-> next_state
	
	return next_state != state
}

while ++n_iterations and iterate() do
{
}

origin -= N - n_iterations

let indices = 0 -> state.length

let sum = indices ver { state[ v ] == '#' } map { v - origin } per Math.sum
put sum
