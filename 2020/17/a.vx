#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let N = 6

let lines = data.lines()

var depth = 1
var width = lines[ 0 ].length
var height = lines.length
var stride

def expand (grid)
{
	let n = N + 1
	
	depth  += n * 2
	width  += n * 2
	height += n * 2
	
	stride = width
	
	let blank_row = (" " * width)
	let blank_grid = blank_row * height
	
	let x_margin = " " * n
	let y_margin = blank_row * n
	let z_margin = blank_grid * n
	
	let lines = str (grid.lines() map { x_margin v x_margin })
	
	grid = y_margin lines y_margin
	
	return z_margin grid z_margin
}

var grid = translated (expand data, ". ", "\0" * 2)

let gridlen = stride * height

let xs   = [-1, 0, 1]
let xys  = xs  map { v - stride,  v, v + stride  }
let xyzs = xys map { v - gridlen, v, v + gridlen } ver ...

def neighbors (i)
{
	return xyzs map { grid[ i + v ] }
}

# 2 -> no change
# 3 -> active
# * -> inactive

var next_state = "\0" * 26

next_state[ 3 ] = '#'

let half_depth = depth div 2

def iterate (i)
{
	display "" i
	
	var work = grid
	
	let skip = N - i
	
	for z in skip .. half_depth do
	{
		let plane = z * gridlen
		
		for y in skip -> height - skip do
		{
			let row = plane + y * stride
			
			for x in skip -> width - skip do
			{
				let i = row + x
				
				let n = Iter.popcount neighbors i
				
				next_state[ 2 ] = grid[ i ]
				
				work[ i ] = next_state[ n ]
			}
		}
	}
	
	let planes = [work / -gridlen]
	
	grid = str (planes[ 0 .. half_depth ], -planes[ 0 -> half_depth ])
}

for i in 0 -> N do
{
	iterate i
}

display ""

put Iter.popcount grid
