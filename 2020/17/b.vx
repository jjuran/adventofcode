#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let N = 6

let lines = data.lines()

var depth = 1
var width = lines[ 0 ].length
var stride = width + 1
var height = lines.length

def expand (grid)
{
	let n = N + 1
	
	depth  += n * 2
	width  += n * 2
	height += n * 2
	
	stride = width + 1
	
	let blank_row = (" " * width) "\n"
	let blank_grid = blank_row * height
	let blank_cube = blank_grid * depth
	
	let x_margin = " " * n
	let y_margin = blank_row * n
	let z_margin = blank_grid * n
	let w_margin = blank_cube * n
	
	let lines = str (grid.lines() map { x_margin v x_margin "\n" })
	
	grid = y_margin lines y_margin
	
	let cube = z_margin grid z_margin
	
	return w_margin cube w_margin
}

var grid = translated (expand data, ". \n", "\0" * 3)

let gridlen = stride * height
let cubelen = gridlen * depth

let xs    = [-1, 0, 1]
let xys   = xs   map { v - stride,  v, v + stride  }
let xyzs  = xys  map { v - gridlen, v, v + gridlen }
let xyzws = xyzs map { v - cubelen, v, v + cubelen } ver ...

def neighbors (i)
{
	return xyzws map { grid[ i + v ] }
}

# 2 -> no change
# 3 -> active
# * -> inactive

var next_state = "\0" * 80

next_state[ 3 ] = '#'

let half_depth = depth div 2

def reflect (sequence, midpoint)
{
	return sequence[ 0 .. midpoint ], -sequence[ 0 -> midpoint ]
}

def iterate (i)
{
	var work = grid
	
	let skip = N - i
	
	for w in skip .. half_depth do
	{
		display "" i ": " w
		
		let cube = w * cubelen
		
		for z in skip .. half_depth do
		{
			let plane = cube + z * gridlen
			
			for y in skip -> height - skip do
			{
				let row = plane + y * stride
				
				for x in skip -> width - skip do
				{
					let i = row + x
					
					let n = Iter.popcount neighbors i
					
					next_state[ 2 ] = grid[ i ]
					
					work[ i ] = next_state[ n ]
				}
			}
		}
	}
	
	let cubes = [work / -cubelen][ 0 .. half_depth ]
	let cubuc = cubes map { str reflect ([v / -gridlen], half_depth) }
	
	grid = str reflect (cubuc, half_depth)
}

for i in 0 -> N do
{
	iterate i
}

display ""

put Iter.popcount grid
