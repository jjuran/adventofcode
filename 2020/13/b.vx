#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let modular = import "modular"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[ 1 ]

let buses = [translated (data, "x", "0") / ','] map int

let schedule = 0 -> buses.length map { buses[ v ] => v } ver .key

var T = 0
var M = 1  # super modulus

for departure in schedule do
{
	let m  = departure.key
	let dt = departure.value
	
	let delay = -(T + dt) mod m
	
	T += modular.alignment (delay, m, M)
	M *= m
}

put T
