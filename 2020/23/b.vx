#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let data = if argc > 1 then {argv[ 1 ]} else {"925176834"}

let N = 10^6
let M = 10^7

var indices = vector[ u32 ] (N + 1)
var current = int data[[ 0 ]]

def init
{
	var x = 0
	
	for c in data do
	{
		indices[ x ] = int str c
		
		x = int str c
	}
	
	for j in data.length + 1 .. N do
	{
		indices[ x ] = j
		
		x = j
	}
	
	indices[ x ] = current
}

display "Setting up..."

init()

def move
{
	let x1 = indices[ current ]
	let x2 = indices[ x1 ]
	let x3 = indices[ x2 ]
	
	indices[ current ] = indices[ x3 ]
	
	var dst = current
	
	do
	{
		dst = (dst - 2) mod N + 1
	}
	while dst in [x1, x2, x3]
	
	let following_dst = indices[ dst ]
	
	indices[ dst ] = x1
	indices[ x3 ] = following_dst
	
	current = indices[ current ]
}

for i in 0 -> M do
{
	if i mod (M div 1000) == 0 then
	{
		display "" (i div (M div 1000))
	}
	
	move()
}

display ""

let a = indices[ 1 ]
let b = indices[ a ]

put (a * b)
