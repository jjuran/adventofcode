#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = load input_path

const edge = 10

const digit = '0' .. '9'
const number = digit+ => int
const heading = ["Tile ", number, ":\n"]
const cell = '.' | '#'
const row = [cell+, '\n']
const grid = [row+ => str]
const tile = [heading, grid, '\n'] => {head _ => tail _}
const grammar = tile+ => {[_]}

def parse
{
	var p = begin data
	
	return p += grammar
}

const tiles = parse()

def canon (edge)
{
	return Math.min (edge, -edge)
}

def top_edge (grid)
{
	return grid[ 0 -> edge ]
}

def bottom_edge (grid)
{
	return (-grid)[ 1 .. edge ]
}

def left_edge (grid)
{
	return -mince( grid, edge + 1 )
}

def right_edge (grid)
{
	return -mince( substr (-grid, 1), edge + 1 )
}

const each_edge = top_edge, left_edge, bottom_edge, right_edge

def map_edges
{
	var edges = []
	
	for t in tiles do
	{
		edges <-- *([each_edge t.value] map { canon v => t.key })
	}
	
	var edge_map = str^[]
	
	for e1 in edges do
	{
		edge_map[ e1.key ] = []
	}
	
	for e2 in edges do
	{
		edge_map[ e2.key ] <-- e2.value
	}
	
	return edge_map
}

const adjacency = map_edges()

def score_tiles_by_unique_edges
{
	var scores = int^[]
	
	for adj in adjacency do
	{
		if adj.value.length == 1 then
		{
			const tile_id = *adj.value
			
			if tile_id in scores then
			{
				++scores[ tile_id ]
			}
			else
			{
				scores[ tile_id ] = 1
			}
		}
	}
	
	return scores
}

const scores = score_tiles_by_unique_edges()

const x = scores ver { v.value == 2 } map .key per Math.product
print x
