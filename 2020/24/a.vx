#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let hexdir = ("nw" | "sw" | "ne" | "se" | "e" | "w") => str
let hexpath = [hexdir+] => {[_]}

def parse (line)
{
	var p = begin line
	
	return p += hexpath
}

var tiles = str^[]

def walk (path)
{
	var fess = 0
	var dexter = 0
	var sinister = 0
	
	let axis = str^
	[
		w: &fess, nw: &dexter, sw: &sinister,
		e: &fess, se: &dexter, ne: &sinister,
	]
	
	for step in path do
	{
		let polarity = 'n' <=> (-step)[ 0 ]  # 'e' < 'n' (1); 'w' > 'n' (-1)
		
		*axis[ step ] += polarity
	}
	
	dexter   += fess
	sinister += fess
	
	let hash = rep (dexter, sinister)
	
	if hash in tiles then
	{
		tiles[ hash ] = not tiles[ hash ]
	}
	else
	{
		tiles[ hash ] = true
	}
}

let paths = data map parse

for path in paths do
{
	walk path
}

let black = tiles pop .value
put black
