#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let N = 100

let hexdir = ("nw" | "sw" | "ne" | "se" | "e" | "w") => str
let hexpath = [hexdir+] => {[_]}

def parse (line)
{
	var p = begin line
	
	return p += hexpath
}

var grid = str^[]

def walk (path)
{
	var fess = 0
	var dexter = 0
	var sinister = 0
	
	let axis = str^
	[
		w: &fess, nw: &dexter, sw: &sinister,
		e: &fess, se: &dexter, ne: &sinister,
	]
	
	for step in path do
	{
		let polarity = 'n' <=> (-step)[ 0 ]  # 'e' < 'n' (1); 'w' > 'n' (-1)
		
		*axis[ step ] += polarity
	}
	
	dexter   += fess
	sinister += fess
	
	let hash = rep [dexter, sinister]
	
	if hash in grid then
	{
		grid[ hash ] = not grid[ hash ]
	}
	else
	{
		grid[ hash ] = true
	}
}

def neighbors (x, y)
{
	let sw = [x - 1, y    ]
	let  w = [x - 1, y - 1]
	let nw = [x    , y - 1]
	let ne = [x + 1, y    ]
	let  e = [x + 1, y + 1]
	let se = [x    , y + 1]
	
	return [sw, w, nw, ne, e, se] map rep
}

let paths = data map parse

for path in paths do
{
	walk path
}

def affected_cells (keys)
{
	var affected_set = str^[]
	
	for key in keys do
	{
		affected_set[ key ] = null
		
		for n in neighbors *(eval key) do
		{
			affected_set[ n ] = null
		}
	}
	
	return affected_set
}

def iterate (i)
{
	display "" i ": " Iter.popcount grid
	
	let grid_keys = grid.keys
	
	let affected_set = affected_cells grid_keys
	
	var work = str^[]
	
	for key in affected_set.keys do
	{
		let n = neighbors *(eval key) pop { v in grid_keys }
		
		if n == 2 or (n == 1 and key in grid_keys) then
		{
			work[ key ] = true
		}
	}
	
	grid = str^(work ver .value)
}

grid = str^(grid ver .value)

for i in 0 -> N do
{
	iterate i
}

display ""

let black = Iter.popcount grid
put black
