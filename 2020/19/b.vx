#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let digit = '0' .. '9'
let lower = 'a' .. 'z'
let letter = lower => str
let number = digit+ => int
let quote = ['"', letter, '"']
let seq = [number, [' ', number]*] => {[_]}
let alt = [seq, " | ", seq]
let chain = (alt | seq) => {[_]}
let recipe = quote | chain
let rule = [number, ": ", recipe] => {head _ => tail _}

def parse (line)
{
	var p = begin line
	
	return p += rule
}

var p = (begin data).find "\n\n"

++p

let parsed = p.past.lines() map parse

++p

let messages = p.rest.lines()

var rules = int^parsed

rules[  8 ] = [[42], [42, 8]]
rules[ 11 ] = [[42, 31], [42, 11, 31]]

def conforms (p, r)
{
	let recipe = rules[ r ]
	
	if recipe isa str then
	{
		return if p += recipe then {p}
	}
	
	var matches = []
	
	for alternative in recipe do
	{
		var submatches = [p]
		
		for step in alternative do
		{
			submatches = submatches map { conforms (v, step) }
			
			if not submatches then
			{
				break
			}
		}
		
		matches <-- *submatches
	}
	
	return *matches
}

def conforming_message (msg)
{
	let matches = [conforms (begin msg ".", 0)]
	
	return bool (matches ver { *v == '.' })
}

var n_conforming = 0

for msg in messages do
{
	display "" n_conforming "  " msg
	
	n_conforming += int conforming_message msg
}

display ""

put n_conforming
