#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def parse (s)
{
	let words = [s / ' ']
	
	let style = words[ 0 ]
	let color = words[ 1 ]
	let count = words[ 4 ]
	
	if count == "no" then
	{
		return style " " color => []
	}
	
	let indices = 1 -> words.length div 4 map {v * 4}
	
	let subcolors = indices map
	{
		" ".join *(words[ v + 1 .. v + 2 ]) => int words[ v ],
	}
	
	return style " " color => subcolors
}

let color_map = str^(data map parse)

var count_memo = str^[]

def count_nested (color)
{
	if color in count_memo then
	{
		return count_memo[ color ]
	}
	
	let contents = color_map[ color ]
	
	let sum = 1 + int (contents map { v.value * count_nested v.key }
	                            per Math.sum)
	
	return count_memo[ color ] = sum
}

put (count_nested "shiny gold" - 1)
