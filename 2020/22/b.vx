#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let digit = '0' .. '9'
let card = digit+ => int
let deck = [card, '\n']+ => {[_]}
let hand = ["Player ", digit, ":\n", deck, '\n'?]
let grammar = [hand (*) 2] => {[_]}

def parse
{
	var p = begin data
	
	return p += grammar
}

let decks = parse data

var (one, two) = *decks

var depth = 0

var nth = 0

def play_game (one, two)
{
	++nth
	
	var seen = str^[]
	
	let play_round =
	{
		let hash = rep (one, two)
		
		if hash in seen then
		{
			return [[]], []
		}
		
		seen[ hash ] = 1
		
		let a = one[ 0 ]
		let b = two[ 0 ]
		
		one = [tail *one]
		two = [tail *two]
		
		var one_wins = a > b
		
		if a <= one.length and b <= two.length then
		{
			++depth
			
			let space = " " * depth
			
			display "" ++nth space rep (a, b)
			
			one_wins, let two_wins = play_game (one[ 0 -> a ], two[ 0 -> b ])
			
			--depth
		}
		
		if one_wins then
		{
			one <-- a, b
		}
		else
		{
			two <-- b, a
		}
	}
	
	while one and two do
	{
		play_round()
	}
	
	return one, two
}

one, two = play_game (one, two)

def score (deck)
{
	let n = deck.length
	
	deck <-- 0
	deck = -deck
	
	return 0 .. n map { deck[ v ] * v } per Math.sum
}

display ""

let winning_score = score one + score two
put winning_score
