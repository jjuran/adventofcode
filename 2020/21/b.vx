#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let lower = 'a' .. 'z'
let word  = lower+ => str
let words = [word, [' ', word]*] => {[_]}
let wlist = [word, [", ", word]*] => {[_]}
let note  = ["(contains ", wlist, ")"]
let food  = [words, ' ', note] => {[_]}

def parse (line)
{
	var p = begin line
	
	return p += food
}

let foods = data map parse

def list_items (i)
{
	var result = str^[]
	
	for food in foods do
	{
		let items = food[ i ]
		
		for it in items do
		{
			result[ it ] = null
		}
	}
	
	return result.keys
}

let ingredients = list_items 0
let allergens   = list_items 1

def map_allergens_to_listings
{
	var result = str^[]
	
	for food in foods do
	{
		let ingredients = Iter.sorted food[ 0 ]
		
		let allergens = food[ 1 ]
		
		for a in allergens do
		{
			if a in result then
			{
				result[ a ] <-- ingredients
			}
			else
			{
				result[ a ] = [ingredients]
			}
		}
	}
	
	return result
}

def intersection (lists)
{
	var result = []
	
	let first = lists[ 0 ]
	
	let other = [tail *lists]
	
	for x in first do
	{
		var present = true
		
		for y in other do
		{
			if not x in y then
			{
				present = false
				break
			}
		}
		
		if present then
		{
			result <-- x
		}
	}
	
	return result
}

def difference (list, removed)
{
	var result = []
	
	for x in list do
	{
		if not x in removed then
		{
			result <-- x
		}
	}
	
	return result
}

let ingredient_lists_by_allergen = map_allergens_to_listings()

var known_mappings = str^[]

def solving
{
	var solved = 0
	
	for a_i in ingredient_lists_by_allergen do
	{
		let inter = intersection a_i.value
		
		let remaining = difference (inter, known_mappings.values)
		
		if remaining.length == 1 then
		{
			known_mappings[ a_i.key ] = *remaining
			
			++solved
		}
	}
	
	return solved
}

while solving() do
{
}

let dangerous = Iter.sorted [*known_mappings] via .key map .value
let canonical = ",".join *dangerous
put canonical
