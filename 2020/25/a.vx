#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }
let modular = import "modular"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines() map int

let modulus = 20201227

def transform (loop_size, subject_number)
{
	return modular.power( subject_number, loop_size, modulus )
}

def recover_exponent (key)
{
	let subject_number = 7
	
	var x = 1
	
	var next = subject_number
	
	do
	{
		if x mod 2^14 == 0 then
		{
			display "" x ": " next
		}
		
		++x
		
		next *= subject_number
		next %= modulus
	}
	while next != key
	
	display ""
	
	return x
}

let secret = recover_exponent data[ 0 ]
let shared = transform (secret, data[ 1 ])
put shared
