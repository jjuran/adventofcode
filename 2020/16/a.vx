#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let digit = '0' .. '9'
let value = digit+ => int
let range = [value, '-', value] => {head _ .. tail _}
let choice = [range, " or ", range] => {[_]}

let p = (begin data).find "\n\n" + 1

def parse_rule (line)
{
	var p = (begin line).find ": "
	
	let field = p.past
	
	p += 2
	
	return field => (p += choice)
}

let biranges = p.past.lines() map .value * parse_rule

let q = p.find "\n\n" + 2

let tickets = (q.find('\n') + 1).rest.lines() map { [v / ','] map int }

def totally_invalid (value)
{
	for r in biranges do
	{
		if value in r[0] or value in r[1] then
		{
			return false
		}
	}
	
	return true
}

let n_errors = tickets map { *v } ver totally_invalid per Math.sum
put n_errors
