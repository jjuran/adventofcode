#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let n = data.length

let lines = data.lines()

let width = lines[ 0 ].length
let stride = width + 1
let height = lines.length

let seats = 0 -> n ver { data[ v ] == 'L' }

let moves =
[
	[-1, -1], [0, -1], [1, -1],
	[-1,  0],          [1,  0],
	[-1,  1], [0,  1], [1,  1],
]

def find_seat (x, y, dx, dy)
{
	x += dx
	y += dy
	
	while x in 0 -> width and y in 0 -> height do
	{
		let i = y * stride + x
		
		if data[ i ] == 'L' then
		{
			return i
		}
		
		x += dx
		y += dy
	}
	
	return ()
}

def find_neighbors (i)
{
	display "" i
	
	let x = i mod stride
	let y = i div stride
	
	return moves map { find_seat (x, y, *v) }
}

let neighbor_map = seats map { v => find_neighbors v }

var grid = data

def step
{
	var work = grid
	
	for seat in neighbor_map do
	{
		let i = seat.key
		
		let popcount = seat.value pop {grid[ v ] == '#'}
		
		work[ i ] = ("#" grid[ i ] "L")[ (popcount + 3) div 4 ]
	}
	
	grid <-> work
	
	return grid != work
}

display "0"

while step() do
{
	display "" (grid pop {v == '#'})
}

put ""
