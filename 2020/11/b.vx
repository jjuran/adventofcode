#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const display = (import "status") { OUT <== _ }

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = load input_path

const n = data.length

const lines = data.lines()

const width = lines[ 0 ].length
const stride = width + 1
const height = lines.length

const seats = 0 -> n ver { data[ v ] == 'L' }

const moves =
[
	[-1, -1], [0, -1], [1, -1],
	[-1,  0],          [1,  0],
	[-1,  1], [0,  1], [1,  1],
]

def find_seat (x, y, dx, dy)
{
	x += dx
	y += dy
	
	while x in 0 -> width and y in 0 -> height do
	{
		const i = y * stride + x
		
		if data[ i ] == 'L' then
		{
			return i
		}
		
		x += dx
		y += dy
	}
	
	return ()
}

def find_neighbors (i)
{
	display "" i
	
	const x = i mod stride
	const y = i div stride
	
	return moves map { find_seat (x, y, *v) }
}

const neighbor_sets = 0 -> n map find_neighbors

var grid = data

def popcount (i)
{
	return (neighbor_sets[ i ] ver {grid[ v ] == '#'}).length
}

def advance (i)
{
	const c = grid[ i ]
	const n = popcount i
	
	return ("#" c "L")[ (n + 3) div 4 ]  # 0 / 1 .. 4 / 5 .. 8
}

def step
{
	var work = grid
	
	for i in seats do
	{
		work[ i ] = advance i
	}
	
	grid <-> work
	
	return grid != work
}

display "0"

while step() do
{
	display "" (grid ver {v == '#'}).length
}

print ""
