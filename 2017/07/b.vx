#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def nameof (s)
{
	return [s / ' '][ 0 ]
}

def listof (s)
{
	let n = s.length
	
	var i = 0
	
	while i < n and s[ i ] != '>' do
	{
		++i
	}
	
	i += 2
	
	let list = translated( s[ i -> n ] " ", ", ", "\n\n" )
	
	return list.lines() ver ...
}

def weightof (s)
{
	let n = s.length
	
	var i = 0
	
	while s[ i ] != '(' do
	{
		++i
	}
	
	var j = ++i
	
	while s[ j ] != ')' do
	{
		++j
	}
	
	let numeral = s[ i -> j ]
	
	let number = int numeral
	
	return number
}

def last (s)
{
	return s[ s.length - 1 ]
}

let n = data.length

var disc-weights  = str^[]
var tower-weights = str^[]
var names = []
var seen = str^[]
var disc = str^[]

def tower-weight (name)
{
	if name in tower-weights then
	{
		return tower-weights[ name ]
	}
	
	var total = disc-weights[ name ]
	
	if name in disc then
	{
		let list = disc[ name ]
		
		for subdisc in list do
		{
			total += tower-weight subdisc
		}
	}
	
	return tower-weights[ name ] = total
}

def check (name)
{
	let list = disc[ name ]
	
	let weights = list map tower-weight
	
	let first  = weights[ 0 ]
	let second = weights[ 1 ]
	
	if first != second then
	{
		return 1 + +(first == weights[ 2 ])
	}
	
	for i in 2 -> weights.length do
	{
		if weights[ i ] != first then
		{
			return 1 + i
		}
	}
	
	return false
}

for s in data do
{
	let name = nameof s
	
	let weight = weightof s
	
	disc-weights[ name ] = weight
	
	if last s != ')' then
	{
		let list = listof s
		
		disc[ name ] = list
		
		names <-- name
		
		for x in list do
		{
			seen[ x ] = name
		}
	}
}

let bottom = ???

for x in names do
{
	if not (x in seen.keys) then
	{
		bottom = x
		
		break
	}
}

var unbalanced = bottom  # The instructions guarantee the bottom is unbalanced
var off-weight = ""

var list

while var off-index = check unbalanced do
{
	list = disc[ unbalanced ]
	
	off-weight = list[ off-index - 1 ]
	
	#warn "Unbalanced: " unbalanced
	#warn "Off: " off-weight
	
	unbalanced = off-weight
}

let balanced = list[ +(list[ 0 ] == off-weight) ]

let balanced-weight   = tower-weight balanced
let unbalanced-weight = tower-weight unbalanced

let delta = balanced-weight - unbalanced-weight

put (disc-weights[ unbalanced ] + delta)
