#!/usr/bin/env vx

const data = 361527

var cells = str^[ "0,0": 1 ]

const neighbors = -1 .. 1 map { const x = _; *(-1 .. 1 map { [x, _] }) }

def key (coords)
{
	return ",".join *coords
}

def adjacent-sum (pt)
{
	const (x, y) = *pt
	
	var sum = 0
	
	for d in neighbors do
	{
		const (dx, dy) = *d
		
		const k = key [x + dx, y + dy]
		
		if k in cells then {sum += cells[ k ]}
	}
	
	return sum
}

def generate-path (yield)
{
	yield [0, 0]
	
	var r = 0  # radius
	var i = 0
	
	while true do
	{
		++r
		i += 2
		
		var x =  r
		var y = -r
		
		for N in 0 -> i do
		{
			yield [x, ++y]
		}
		
		for W in 0 -> i do
		{
			yield [--x, y]
		}
		
		for S in 0 -> i do
		{
			yield [x, --y]
		}
		
		for E in 0 -> i do
		{
			yield [++x, y]
		}
	}
}

# This is not a full function, so `return` exits the caller

let handler =
{
	let pt = _
	
	const sum = adjacent-sum pt
	
	if sum > data then
	{
		return sum
	}
	
	cells[ key pt ] = sum
}

let sum = generate-path handler

put sum
