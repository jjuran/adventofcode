#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

var registers = str^[]

const conds = str^
[
	"<": {head _ < tail _},
	">": {head _ > tail _},
	"<=": {head _ <= tail _},
	">=": {head _ >= tail _},
	"==": {head _ == tail _},
	"!=": {head _ != tail _},
]

def get (reg) { if reg in registers then {registers[ reg ]} else {0} }

def add (reg, arg)
{
	if reg in registers then
	{
		registers[ reg ] += arg
	}
	else
	{
		registers[ reg ] = arg
	}
}

var maximum = 0

for instruction in data do
{
	const reg,
	const op,
	const arg,
	const literal-if,
	const creg,
	const cop,
	const carg = instruction / ' '
	
	if conds[ cop ]( get creg, int carg ) then
	{
		var x = int arg
		
		if op[ 0 ] == 'd' then
		{
			x = -x
		}
		
		add( reg, x )
		
		maximum = Math.max( maximum, registers[ reg ] )
	}
}

print maximum
