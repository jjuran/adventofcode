#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

var registers = str^[]

let conds = str^
[
	"<": {head _ < tail _},
	">": {head _ > tail _},
	"<=": {head _ <= tail _},
	">=": {head _ >= tail _},
	"==": {head _ == tail _},
	"!=": {head _ != tail _},
]

def get (reg) { if reg in registers then {registers[ reg ]} else {0} }

def add (reg, arg)
{
	if reg in registers then
	{
		registers[ reg ] += arg
	}
	else
	{
		registers[ reg ] = arg
	}
}

for instruction in data do
{
	let (reg, op, arg, literal-if, creg, cop, carg) = instruction / ' '
	
	if conds[ cop ]( get creg, int carg ) then
	{
		var x = int arg
		
		if op[ 0 ] == 'd' then
		{
			x = -x
		}
		
		add( reg, x )
	}
}

put Iter.max registers.values
