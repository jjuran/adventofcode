#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let N = 18

def parse (line)
{
	let p = (begin line).find " => "
	let q = p + " => "
	
	return p.past, q.rest
}

let transpose_indices_2x2 =
[
	0, 1 + 2,
	1, 1 + 3,
]

let transpose_indices_3x3 =
[
	0, 1 + 3, 2 + 6,
	1, 1 + 4, 2 + 7,
	2, 1 + 5, 2 + 8,
]

def flips (pattern)
{
	let rows = [pattern  / '/']
	
	let rflip = [-pattern  / '/']
	let vflip = -rows
	let hflip = -rflip
	
	return rows, hflip, vflip, rflip
}

def variants_2x2 (pattern)
{
	let transpose = transpose_indices_2x2 map { pattern[ v ] }
	
	return [ flips pattern, flips "/".join (str transpose / 2) ]
}

def variants_3x3 (pattern)
{
	let transpose = transpose_indices_3x3 map { pattern[ v ] }
	
	return [ flips pattern, flips "/".join (str transpose / 3) ]
}

var x2_to_3 = str^[]
var x3_to_4 = str^[]

for line in data do
{
	let (src, dst) = parse line
	
	if src.length == "../..".length then
	{
		for block in variants_2x2 src do
		{
			x2_to_3[ "/".join *block ] = dst
		}
	}
	else
	{
		for block in variants_3x3 src do
		{
			x3_to_4[ "/".join *block ] = dst
		}
	}
}

def extract (grid, stride, dx, dy, x, y)
{
	let base = y * dy * stride + x * dx
	
	return 0 -> dy map
	{
		let i = base + v * stride
		let j = i + dx
		
		grid[ i -> j ],
	}
	per {a "/" b}
}

def fragment (grid, stride, dx, dy, nx, ny)
{
	def fragment_row (y)
	{
		return 0 -> nx map { extract (grid, stride, dx, dy, v, y) }
	}
	
	return 0 -> ny map fragment_row
}

def enhance_row (ruleset, squares)
{
	return squares map { [ruleset[ v ] / '/'] }
}

def combine_row (squares)
{
	def scanline (i)
	{
		return squares map { v[ i ] } per string
	}
	
	let dx = squares[ 0 ].length
	
	return 0 -> dx map scanline map { v "\n" } per string
}

var memo = [ str^[] (*) N + 1 ]

def eventual_popcount (n_iterations, patsize, pattern)
{
	if n_iterations == 0 then
	{
		return Iter.popcount translated (pattern, "./\n", "\0" * 3)
	}
	
	if patsize == 2 then
	{
		let rule = x2_to_3[ pattern ]
		
		if rule in memo[ n_iterations ] then
		{
			return memo[ n_iterations ][ rule ]
		}
		else
		{
			let count = eventual_popcount (n_iterations - 1, 3, rule)
			
			memo[ n_iterations ][ rule ] = count
			
			return count
		}
	}
	
	let ruleset = ???
	let divisor = ???
	let factor  = ???
	
	if patsize % 2 then
	{
		# 3x3 -> 4x4
		
		ruleset = x3_to_4
		divisor = 3
		factor  = 4
	}
	else
	{
		# 4x4 -> 6x6
		# 6x6 -> 9x9
		
		ruleset = x2_to_3
		divisor = 2
		factor  = 3
	}
	
	let x = patsize / divisor
	
	let stride = patsize + 1
	
	let squares = fragment (pattern, stride, divisor, divisor, x, x)
	
	if patsize == 6 then
	{
		return squares map { *v }
		               map eventual_popcount % (n_iterations, 2)
		               per Math.sum
	}
	
	let enhanced = squares map enhance_row % ruleset
	let combined = enhanced map combine_row
	
	pattern = "".join *combined
	patsize = patsize * factor / divisor
	
	return eventual_popcount (n_iterations - 1, patsize, pattern)
}

put eventual_popcount (N, 3, "/".join *DATA.lines())

end.
.#.
..#
###
