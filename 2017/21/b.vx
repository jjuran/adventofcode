#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()

const N = 18

def parse (line)
{
	const p = (begin line).find " => "
	const q = p + " => "
	
	return p.past, q.rest
}

const transpose_indices_2x2 =
[
	0, 1 + 2,
	1, 1 + 3,
]

const transpose_indices_3x3 =
[
	0, 1 + 3, 2 + 6,
	1, 1 + 4, 2 + 7,
	2, 1 + 5, 2 + 8,
]

def flips (pattern)
{
	const rows = [pattern  / '/']
	
	const rflip = [-pattern  / '/']
	const vflip = -rows
	const hflip = -rflip
	
	return rows, hflip, vflip, rflip
}

def variants_2x2 (pattern)
{
	const transpose = transpose_indices_2x2 map { pattern[ v ] }
	
	return [ flips pattern, flips "/".join (str transpose / 2) ]
}

def variants_3x3 (pattern)
{
	const transpose = transpose_indices_3x3 map { pattern[ v ] }
	
	return [ flips pattern, flips "/".join (str transpose / 3) ]
}

var x2_to_3 = str^[]
var x3_to_4 = str^[]

for line in data do
{
	const src, const dst = parse line
	
	if src.length == "../..".length then
	{
		for block in variants_2x2 src do
		{
			x2_to_3[ "/".join *block ] = dst
		}
	}
	else
	{
		for block in variants_3x3 src do
		{
			x3_to_4[ "/".join *block ] = dst
		}
	}
}

def extract (grid, stride, dx, dy, x, y)
{
	const base = y * dy * stride + x * dx
	
	return 0 -> dy map
	{
		const i = base + v * stride
		const j = i + dx
		
		grid[ i -> j ],
	}
}

def fragment (grid, stride, dx, dy, nx, ny)
{
	def fragment_row (y)
	{
		return 0 -> nx map { extract (grid, stride, dx, dy, v, y) }
	}
	
	return 0 -> ny map fragment_row
}

def enhance (ruleset, square)
{
	const key = "/".join *square
	
	return [ruleset[ key ] / '/']
}

def enhance_row (ruleset, squares)
{
	return squares map enhance % ruleset
}

def combine_row (squares)
{
	def scanline (i)
	{
		return squares map { v[ i ] } per string
	}
	
	const dx = squares[ 0 ].length
	
	return 0 -> dx map scanline map { v "\n" } per string
}

var pattern = DATA
var patsize = 3

for T in 0 -> N do
{
	const ruleset
	const divisor
	const factor
	
	if patsize % 2 then
	{
		# 3x3 -> 4x4
		
		ruleset = x3_to_4
		divisor = 3
		factor  = 4
	}
	else
	{
		# 2x2 -> 3x3
		
		ruleset = x2_to_3
		divisor = 2
		factor  = 3
	}
	
	const x = patsize / divisor
	
	const stride = patsize + 1
	
	const squares = fragment (pattern, stride, divisor, divisor, x, x)
	
	const enhanced = squares map enhance_row % ruleset
	const combined = enhanced map combine_row
	
	pattern = "".join *combined
	patsize = patsize * factor / divisor
}

print Iter.popcount translated (pattern, ".\n", "\0" * 2)

end.
.#.
..#
###
