#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = [ (load input_path).lines()[0] / ',' ]

let n = 16
let N = 10^9

let lineup = string ('a' .. byte (u8 'a' + n - 1))

var dancers = lineup

def swap (i, j)
{
	let a = dancers[ i ]
	let b = dancers[ j ]
	
	dancers[ i ] = b
	dancers[ j ] = a
}

def dance
{
	for move in data do
	{
		let code = move[ 0 ]
		let data = substr (move, 1)
		
		if code == 's' then
		{
			let shift = n - int data
			
			dancers = dancers[ shift -> n ] dancers[ 0 -> shift ]
		}
		else if code == 'x' then
		{
			swap *([data / '/'] map int)
		}
		else if code == 'p' then
		{
			let (a, b) = data / '/'
			
			swap ((begin dancers).find(a).past.length,
			      (begin dancers).find(b).past.length)
		}
	}
}

var log = []

display "0: " dancers

var m = 0

do
{
	log <-- dancers
	
	dance()
	
	++m
	
	display m ": " dancers
}
while dancers != lineup

let i = N mod m

display ""

put log[ i ]
