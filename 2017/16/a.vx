#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = [ (load input_path).lines()[0] / ',' ]

let n = 16

var dancers = string ('a' .. byte (u8 'a' + n - 1))

def swap (i, j)
{
	let a = dancers[ i ]
	let b = dancers[ j ]
	
	dancers[ i ] = b
	dancers[ j ] = a
}

for move in data do
{
	let code = move[ 0 ]
	let data = substr (move, 1)
	
	if code == 's' then
	{
		let shift = n - int data
		
		dancers = dancers[ shift -> n ] dancers[ 0 -> shift ]
	}
	else if code == 'x' then
	{
		swap *([data / '/'] map int)
	}
	else if code == 'p' then
	{
		let (a, b) = data / '/'
		
		swap ((begin dancers).find(a).past.length,
		      (begin dancers).find(b).past.length)
	}
}

put dancers
