#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def parse (line)
{
	let words = [line / ' ']
	
	let a = [words[ 0 ] / ','] map int
	let b = [words[ 2 ] / ','] map int
	
	return [a, b]
}

let lines = data map parse

let points = lines map { *v }

let max_x = Iter.max (points map { v[ 0 ] })
let max_y = Iter.max (points map { v[ 1 ] })

let width  = max_x + 1
let height = max_y + 1
let stride = width + 1

var grid = ("0" * width) "\n" * height

for line in lines do
{
	let (a, b) = *line
	
	var a0 = a[ 0 ]
	var b0 = b[ 0 ]
	
	var a1 = a[ 1 ]
	var b1 = b[ 1 ]
	
	if let x_swapped = a0 > b0 then
	{
		a0 <-> b0
	}
	
	if let y_swapped = a1 > b1 then
	{
		a1 <-> b1
	}
	
	if a0 == b0 then
	{
		for i in a1 .. b1 do
		{
			let k = i * stride + a0
			
			grid[ k ] = byte (u8 grid[ k ] + 1)
		}
	}
	else if a1 == b1 then
	{
		for j in a0 .. b0 do
		{
			let k = a1 * stride + j
			
			grid[ k ] = byte (u8 grid[ k ] + 1)
		}
	}
	else if x_swapped == y_swapped then
	{
		var k = a1 * stride + a0
		
		for x in a0 .. b0 do
		{
			grid[ k ] = byte (u8 grid[ k ] + 1)
			
			k += stride + 1
		}
	}
	else
	{
		var k = a1 * stride + b0
		
		for x in a0 .. b0 do
		{
			grid[ k ] = byte (u8 grid[ k ] + 1)
			
			k += stride - 1
		}
	}
}

put Iter.popcount translated (grid, "01\n", "\0" * 3)
