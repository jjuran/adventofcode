#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

var grid = load input_path

const width = (begin grid).find('\n').past.length
const stride = width + 1

const blank = (" " * width) "\n"

grid = " " blank grid blank

const indices = 1 + stride -> grid.length - stride - 1

def smear (x)
{
	return *(-1 .. 1 map {x + v})
}

const neighbor_offsets = -1 .. 1 map { v * stride } map smear

var n_flashes = 0

def step
{
	var flashed = []
	
	for i in indices do
	{
		if grid[ i ] in '0' .. '8' then
		{
			grid[ i ] = byte (u8 grid[ i ] + 1)
		}
		else if grid[ i ] == '9' then
		{
			grid[ i ] = '0'
			
			flashed <-- i
			
			++n_flashes
		}
	}
	
	while flashed do
	{
		var incoming = []
		
		for i in flashed do
		{
			for j in (neighbor_offsets map { i + v }) do
			{
				if grid[ j ] in '1' .. '8' then
				{
					grid[ j ] = byte (u8 grid[ j ] + 1)
				}
				else if grid[ j ] == '9' then
				{
					grid[ j ] = '0'
					
					incoming <-- j
					
					++n_flashes
				}
			}
		}
		
		flashed <- incoming
	}
}

const N = 100

for T in 1 .. N do
{
	step()
}

print n_flashes
