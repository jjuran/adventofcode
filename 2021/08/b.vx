#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def parse (line)
{
	let (left, right) = line / '|'
	
	let signals = [left / ' '] ver ...
	let output = [right / ' '] ver ...
	
	return signals => output
}

let patterns =
[
	"",
	"",
	"  -  - ",  # 1
	"- -  - ",  # 7
	" --- - ",  # 4
	"-??-??-",  # 2, 3, or 5
	"--???--",  # 0, 6, or 9
	"-------",  # 8
]
map { translated (packed v, "?- ", x"00f0ff") }

def remap_signals (signals)
{
	var remap = [x"00" * 7 (*) 7]
	
	for s in signals do
	{
		let len = s.length
		
		let pattern = patterns[ len ]
		
		let antipattern = translated (pattern, x"f0ff", x"fff0")
		
		for c in 'a' .. 'g' do
		{
			let wire = u8 c - u8 'a'
			
			remap[ wire ] |= [antipattern, pattern][ +(c in s) ]
		}
	}
	
	var known = x"00" * 7
	var sigmap = "\0" * 7
	
	for wire in 0 -> 7 do
	{
		if Iter.popcount ~remap[ wire ] == 1 then
		{
			let segment = (begin remap[ wire ]).find('\xf0').past.size
			
			known[ segment ] = '\xff'
			
			sigmap[ wire ] = byte (u8 'a' + segment)
		}
	}
	
	for wire2 in 0 -> 7 do
	{
		if not sigmap[ wire2 ] then
		{
			remap[ wire2 ] |= known
			
			let index = (begin remap[ wire2 ]).find('\xf0').past.size
			
			sigmap[ wire2 ] = byte (u8 'a' + index)
		}
	}
	
	return sigmap
}

let digit_segments =
[
	"abcefg",
	"cf",
	"acdeg",
	"acdfg",
	"bcdf",
	"abdfg",
	"abdefg",
	"acf",
	"abcdefg",
	"abcdfg",
]

let digit_lookup = str^[ *(0 .. 9 map { digit_segments[ v ] => str v }) ]

def decode_entry (entry)
{
	let sigmap = remap_signals entry.key
	
	def decode (signal)
	{
		let remapped = translated (signal, "abcdefg", sigmap)
		
		return digit_lookup[ str Iter.sorted [*remapped] ]
	}
	
	let digits = entry.value map decode
	
	return int str digits
}

let total = data map parse map decode_entry per Math.sum
put total
