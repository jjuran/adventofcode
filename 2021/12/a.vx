#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const links = (load input_path).lines() map { [v / '-'] }

var graph = str^[]

for cave in (links map { *v }) do
{
	graph[ cave ] = []  # sequence has duplicates, but this is idempotent
}

for link in links do
{
	const (a, b) = *link
	
	graph[ a ] <-- b
	graph[ b ] <-- a
}

def paths_from (path)
{
	if path[ 0 ] == "end" then
	{
		return 1
	}
	
	var n = 0
	
	for dst in graph[ path[ 0 ] ] do
	{
		if not dst[ 0 ] in 'a' .. 'z' or not dst in path then
		{
			n += paths_from [dst, *path]
		}
	}
	
	return n
}

print paths_from ["start"]
