#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

def generate_full_map
{
	var grid = load input_path
	
	var subgrids = [ grid.lines() ]
	
	for x in 1 -> 9 do
	{
		grid = translated (grid, "123456789", "234567891")
		
		subgrids <-- grid.lines()
	}
	
	let height = subgrids[ 0 ].length
	
	var s = ""
	
	for yy in 0 -> 5 do
	{
		for y in 0 -> height do
		{
			for xx in 0 -> 5 do
			{
				s .= subgrids[ xx + yy ][ y ]
			}
			
			s .= "\n"
		}
	}
	
	return s
}

let grid = generate_full_map()

let grid_len = grid.length

let width = (begin grid).find('\n').past.length
let stride = width + 1

def neighbors (index)
{
	return
	[
		index - 1, index - stride,
		index + 1, index + stride,
	]
	ver { v in 0 -> grid_len and grid[ v ] in '0' .. '9' }
}

def lowest_risk
{
	var visited = "\0" * grid_len
	
	var risk = 0
	
	var frontier = [ 0 ]
	
	var risk_buckets = [ [] (*) 9 ]
	
	while true do
	{
		display "Total risk: " risk
		
		for index in frontier do
		{
			if not visited[ index ] then
			{
				if index == grid_len - 2 then
				{
					display ""
					
					return risk
				}
				
				visited[ index ] = 'x'
				
				for i in neighbors index do
				{
					risk_buckets[ u8 grid[ i ] - u8 '1' ] <-- i
				}
			}
		}
		
		++risk
		
		frontier = risk_buckets[ 0 ]
		
		risk_buckets = [*risk_buckets[ 1 -> 9 ], []]
	}
}

put lowest_risk()
