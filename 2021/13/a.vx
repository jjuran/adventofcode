#!/usr/bin/env minivx

const bindir = dirname realpath argv[ 0 ]

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

def parse
{
	const (dots_chunk, folds_chunk) = load input_path / "\n\n"
	
	const dots = [dots_chunk / '\n'] map { [eval v] }
	
	def parse_fold (line)
	{
		const (axis, pos) = substr (line, "fold along ".length) / '='
		
		return [u8 *axis - u8 'x', int pos]
	}
	
	const folds = folds_chunk.lines()[[ 0 ]] map parse_fold
	
	return dots, folds
}

def folded (axis, fold, dot)
{
	if dot[ axis ] > fold then
	{
		dot[ axis ] = fold - (dot[ axis ] - fold)
	}
	
	return dot
}

var dots, const folds = parse()

for fold in folds do
{
	dots = dots map folded % *fold
}

const max_x = Iter.max (dots map { v[ 0 ] })
const max_y = Iter.max (dots map { v[ 1 ] })

const width  = max_x + 1
const height = max_y + 1

var grid = "\0" * (width * height)

for dot in dots do
{
	const (x, y) = *dot
	
	grid[ x + y * width ] = '#'
}

print Iter.popcount grid
