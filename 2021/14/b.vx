#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

def parse
{
	let (polymer, rules_chunk) = load input_path / "\n\n"
	
	def parse_rule (line)
	{
		let (a, b) = line / " -> "
		
		return a => b
	}
	
	return polymer, str^(rules_chunk.lines() map parse_rule)
}

let (polymer, rules) = parse()

def make_elements
{
	var elements = str^[]
	
	for rule in rules do
	{
		elements[ rule.value ] = null
	}
	
	return str elements.keys
}

let elements = make_elements()

def step (polymer)
{
	var p = begin polymer
	
	var s = "" *p
	
	while p.rest.length > 1 do
	{
		let key = p.rest[ 0 -> 2 ]
		
		++p
		
		s .= rules[ key ] *p
	}
	
	return s
}

let N = 40

let result = step^3 polymer

def count_in (container, e)
{
	return container.length - Iter.popcount translated( container, e, "\0" )
}

def augmented_counts (element, old_counts)
{
	var new_counts = []
	
	for a in elements do
	{
		for b in elements do
		{
			let x = rules[ a b "" ]
			
			let count = old_counts[ a x ]
			          + old_counts[ x b ]
			          + +(x == element)
			
			new_counts <-- a b "" => count
		}
	}
	
	return str^new_counts
}

let counts = elements map str map { v => count_in (result, v) }

def full_count (extreme)
{
	let x = (extreme counts via .value).key
	
	let count1 = str^(rules map { v.key => +(v.value == x) })
	
	let countN = (augmented_counts % x)^(N - 1) count1
	
	return count_in (polymer, x) + (polymer gap {countN[ str _ ]} per Math.sum)
}

let delta = [Iter.max, Iter.min] map full_count per {a - b}
put delta
