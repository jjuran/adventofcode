#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

def parse
{
	let (polymer, rules_chunk) = load input_path / "\n\n"
	
	def parse_rule (line)
	{
		let (a, b) = line / " -> "
		
		return a => b
	}
	
	return polymer, str^(rules_chunk.lines() map parse_rule)
}

let (polymer, rules) = parse()

def make_elements
{
	var elements = str^[]
	
	for rule in rules do
	{
		elements[ rule.value ] = null
	}
	
	return str elements.keys
}

let elements = make_elements()

def step (polymer)
{
	var p = begin polymer
	
	var s = "" *p
	
	while p.rest.length > 1 do
	{
		let key = p.rest[ 0 -> 2 ]
		
		++p
		
		s .= rules[ key ] *p
	}
	
	return s
}

let N = 10

let result = step^N polymer

def count (e)
{
	return result.length - Iter.popcount translated( result, e "", "\0" )
}

let counts = elements map count

let delta = Iter.max counts - Iter.min counts
put delta
