#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path)

let lines = data.lines()
let width = lines[ 0 ].length
let stride = width + 1

let blank = "~" * stride
let grid = str (blank, lines map { v "~" }, blank)

let digit = '0' .. '9'

def neighbors (index)
{
	return
	[
		index - 1, index - stride,
		index + 1, index + stride,
	]
}

def is_low (i)
{
	let height = grid[ i ]
	
	return height in digit and not (neighbors i ver { grid[ v ] <= height })
}

def basin_size (i)
{
	var floodmap = grid
	
	var frontier = [ i ]
	
	var size = 0
	
	while frontier do
	{
		let i = frontier[ 0 ]
		
		frontier = [tail *frontier]
		
		if floodmap[ i ] != '.' then
		{
			floodmap[ i ] = '.'
			
			++size
			
			frontier <-- *(neighbors i ver { grid[ v ] < '9' })
		}
	}
	
	return size
}

let basin_sizes = stride -> grid.length - stride ver is_low map basin_size

let sizes_descending = -(Iter.sorted basin_sizes)

let product = sizes_descending[ 0 -> 3 ] per Math.product
put product
