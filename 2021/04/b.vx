#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let number_drawings = [ eval data[ 0 ] ]

let n_cards = data.length div 6

def get_card (i)
{
	let text = "\n" "\n".join *data[ 2 + i * 6 -> 5 + 2 + i * 6 ]
	
	return [ text / 25 ] map eval
}

let cards = 0 -> n_cards map get_card

var occurrences = [ [] (*) 100 ]

for c in 0 -> n_cards do
{
	let card = cards[ c ]
	
	for i in 0 -> 5 do
	{
		for j in 0 -> 5 do
		{
			occurrences[ card[ i * 5 + j ] ] <-- [ c, i, j ]
		}
	}
}

var markings = [ "\0" * 5^2 (*) n_cards ]

def bingo (c, i, j)
{
	let x5 = "x" * 5
	
	let rows = [markings[ c ] / 5]
	
	return rows[ i ] == x5 or rows map { v[ j ] } per str == x5
}

def unmarked_sum (c)
{
	let card = cards[ c ]
	
	let marks = markings[ c ]
	
	return 0 -> 25 ver { not marks[ v ] } map { card[ v ] } per {a + b}
}

var last_number_drawn = 0

var winning_cards = "\0" * n_cards

def last_card_to_win
{
	for number in number_drawings do
	{
		last_number_drawn = number
		
		for o in occurrences[ number ] do
		{
			let (c, i, j) = *o
			
			markings[ c ][ i * 5 + j ] = 'x'
			
			if bingo *o then
			{
				winning_cards[ c ] = 'x'
				
				if winning_cards == "x" * n_cards then
				{
					return c
				}
			}
		}
	}
}

let score = unmarked_sum last_card_to_win() * last_number_drawn
put score
