#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = load input_path

let lines = data.lines()

let width  = lines[ 0 ].length
let height = lines.length

let maze = str lines

var portkeys = str^[]
var all_portals = int^[]

var interportal_distances = str^[]

let upper = packed ('A' .. 'Z')

def isupper (c) { c in upper }

def decompose (offset)
{
	return offset mod width, offset div width
}

let dirs =
[
	-width,  # N
	width,  # S
	-1,  # W
	1,  # E
]

def is_inner (offset)
{
	let x = offset mod width
	let y = offset div width
	
	return x in 3 -> width - 3 and y in 3 -> height - 3
}

var reverse_lookup = int^[]

def record_portal (label, p)
{
	var offset = p.past.length
	
	reverse_lookup[ offset ] = label
	
	if not label in portkeys then
	{
		portkeys[ label ] = offset
	}
	else
	{
		var other = portkeys[ label ]
		
		display "Portal " label " at " rep ([other, offset] map decompose)
		
		if is_inner other then
		{
			offset <-> other
		}
		
		# offset is inside and other is outside
		
		all_portals[ offset ] = other
		all_portals[ other ] = offset
	}
}

var top_left     = 0
var bottom_right = 0

def find_portal_labels
{
	var p = begin maze
	var q
	var c
	
	let top    = p + width
	let bottom = p + (maze.length - width)
	
	while p do
	{
		let c = *p++
		
		if c == '#' then
		{
			let offset = (p + -1).past.length
			
			bottom_right = offset
			
			if top_left == 0 then
			{
				top_left = offset
			}
		}
		
		if not isupper c then {continue}
		
		var c_
		
		if isupper (c_ = *p++) then
		{
			# horizontal label
			
			let label = c c_ ""
			
			if *p == '.' then
			{
				# label on left
				
				record_portal( label, p )
			}
			else if *(q = p + -3) == '.' then
			{
				# label on right
				
				record_portal( label, q )
			}
			else
			{
				throw "Unattached label?"
			}
			
			continue
		}
		
		p -= 2
		
		if p >= top and isupper *(q = p + -width) then
		{
			# bottom of vertical label
			
			let label = *q c ""
			
			if q >= top and *(q -= width) == '.' then
			{
				record_portal( label, q )
			}
		}
		else if p <= bottom and isupper *(q = p + width) then
		{
			# top of vertical label
			
			let label = c *q ""
			
			if q <= bottom and *(q += width) == '.' then
			{
				record_portal( label, q )
			}
		}
		
		++p
	}
}

find_portal_labels()

let (start, finish) = *portkeys[[ "AA", "ZZ" ]]

var reachable_portals = int^(all_portals.keys map {v => []})

reachable_portals[ start  ] = []
reachable_portals[ finish ] = []

def nameof (offset)
{
	let layer = if is_inner offset then {"inner"} else {"outer"}
	
	return layer " " reverse_lookup[ offset ]
}

def compute_distances (portal)
{
	var copy = maze
	
	var distance = 0
	var frontier = [portal.value]
	
	while frontier do
	{
		var new_frontier = []
		
		for f in frontier do
		{
			if copy[ f ] != '.' then {continue}
			
			copy[ f ] = ','
			
			if (f in all_portals or f == finish) and f != portal.value then
			{
				interportal_distances[ portal.value "-" f ] = distance
				
				reachable_portals[ portal.value ] <-- f
				
				display (nameof portal.value) " reaches " nameof f
			}
			
			for d in dirs do
			{
				let offset = f + d
				
				new_frontier <-- offset
			}
		}
		
		frontier = new_frontier
		
		++distance
	}
}

compute_distances (AA: start)
compute_distances (ZZ: finish)

for p in all_portals do
{
	compute_distances p
}

var paths = [0: [start => 0]]
var exits = []

var best_distance_to = str^[]

def is_best_distance_to (distance, site, level)
{
	let key = site ":" level
	
	if key in best_distance_to and best_distance_to[ key ] < distance then
	{
		return false
	}
	
	best_distance_to[ key ] = distance
	return true
}

def compute_paths
{
	let minimum = Iter.min (paths map .key)
	
	let min_paths = paths ver {v.key == minimum}
	let more_paths = paths ver {v.key > minimum}
	
	var new_paths = more_paths
	
	for path in min_paths do
	{
		let distance = path.key
		let portals  = path.value
		
		let last = portals[ portals.length - 1 ]
		
		let index = last.key
		let level = last.value
		
		for reachable in reachable_portals[ index ] do
		{
			let inward  = is_inner reachable
			let outward = not inward
			let is_exit = reachable == finish
			
			if level == 0 and outward and not is_exit then
			{
				continue
			}
			
			if level > 0 and (is_exit or reachable == start) then
			{
				# We found ZZ/AA, but not at level 0, so it's really a wall.
				continue
			}
			
			let interportal = index "-" reachable
			
			var added_distance = interportal_distances[ interportal ]
			
			if is_exit then
			{
				exits <-- distance + added_distance
				
				continue
			}
			
			++added_distance
			
			let next_index = all_portals[ reachable ]
			let next_level = level + +inward + -outward
			
			let next_portal = next_index => next_level
			
			let new_distance = distance + added_distance
			
			if is_best_distance_to( new_distance, next_index, next_level ) then
			{
				new_paths <-- new_distance => [ *portals, next_portal ]
			}
		}
	}
	
	paths = new_paths
	
	if exits then
	{
		exits = [Iter.min exits]
		
		paths = paths ver { v.key < *exits }
	}
}

while paths do
{
	compute_paths()
	
	display "Path count: " paths.length
	
	if exits then
	{
		break
	}
}

display ""

put exits
