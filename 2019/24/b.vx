#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const display = (import "status") { OUT <== _ }

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = load input_path

const lines = data.lines()

const width  = lines[ 0 ].length
const height = lines.length

var grid = str lines

const N = grid.length

const empty_grid = "." * N

const top    = 0 -> 5 map ...
const left   = 0 -> 5 map { v * 5 }
const right  = 0 -> 5 map { v * 5 + 4 }
const bottom = 0 -> 5 map { v + 5 * 4 }

const adjacency =
[
	[-1: [7, 11], 0: [1, 5]],   #  0 (0,0)
	[-1: [7], 0: [0, 2, 6]],    #  1 (1,0)
	[-1: [7], 0: [1, 3, 7]],    #  2 (2,0)
	[-1: [7], 0: [2, 4, 8]],    #  3 (3,0)
	[-1: [7, 13], 0: [3, 9]],   #  4 (4,0)
	
	[-1: [11], 0: [0, 6, 10]],  #  5 (0,1)
	[0: [1, 5, 7, 11]],         #  6 (1,1)
	[0: [2, 6, 8], 1: top],     #  7 (2,1)
	[0: [3, 7, 9, 13]],         #  8 (3,1)
	[-1: [13], 0: [4, 8, 14]],  #  9 (4,1)
	
	[-1: [11], 0: [5, 11, 15]],  # 10 (0,2)
	[0: [6, 10, 16], 1: left],   # 11 (1,2)
	[],
	[0: [8, 14, 18], 1: right],  # 13 (3,2)
	[-1: [13], 0: [9, 13, 19]],  # 14 (4,2)
	
	[-1: [11], 0: [10, 16, 20]],   # 15 (0,3)
	[0: [11, 15, 17, 21]],         # 16 (1,3)
	[0: [16, 18, 22], 1: bottom],  # 17 (2,1)
	[0: [13, 17, 19, 23]],         # 18 (3,3)
	[-1: [13], 0: [14, 18, 24]],   # 19 (4,3)
	
	[-1: [11, 17], 0: [15, 21]],   # 20 (0,4)
	[-1: [17], 0: [16, 20, 22]],   # 21 (1,4)
	[-1: [17], 0: [17, 21, 23]],   # 22 (2,4)
	[-1: [17], 0: [18, 22, 24]],   # 23 (3,4)
	[-1: [13, 17], 0: [19, 23]],   # 24 (4,4)
]

var gridspace = [empty_grid, grid, empty_grid]

def adjacent_to_one (outer-grid-inner, i)
{
	const adj = adjacency[ i ]
	
	var total = 0
	
	for level in adj do
	{
		const grid = outer-grid-inner[ level.key + 1 ]
		
		for j in level.value do
		{
			total += +(grid[ j ] == '#')
		}
	}
	
	return total
}

def new_cell (old_cell, n_adjacent)
{
	var has_bug = old_cell == '#'
	
	has_bug = if has_bug then {n_adjacent == 1} else { n_adjacent in 1 .. 2 }
	
	return ".#"[ +has_bug ]
}

def advance (outer-grid-inner)
{
	const grid = outer-grid-inner[ 1 ]
	
	const adjacent_to = adjacent_to_one % outer-grid-inner
	
	return str (0 -> N map { new_cell (grid[ v ], adjacent_to v) })
}

def empty (grid)
{
	return grid == empty_grid
}

def step
{
	if not empty gridspace[ gridspace.length - 2 ] then
	{
		gridspace <-- empty_grid
	}
	
	if not empty gridspace[ 1 ] then
	{
		gridspace = [empty_grid, *gridspace]
	}
	
	gridspace = 2 -> gridspace.length map { advance gridspace[ v - 2 .. v] }
	
	gridspace <-- empty_grid
	gridspace = [empty_grid, *gridspace]
}

def count
{
	return gridspace map { str(v ver {v == '#'}).length } per Math.sum
}

const n_steps = 200

for i in 0 -> n_steps do
{
	display ""  i
	
	step()
}

display ""

print count()
