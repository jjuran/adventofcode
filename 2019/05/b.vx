#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

var memory = [packed data / ','] map {int v.string}

var PC = 0

def less   (a, b) {a < b}
def equals (a, b) {a == b}

let opcodes = [ 0, Math.sum, Math.product, 3, 4, 5, 6, less, equals ]

def run (input)
{
	while true do
	{
		let opcode = memory[ PC++ ]
		
		let op = opcode % 100
		
		var modes = opcode div 100
		
		if op == 99 then
		{
			break
		}
		
		let i = memory[ PC++ ]
		let a = if modes % 10 then {i} else {memory[ i ]}
		
		if op == 3 then
		{
			memory[ i ] = input
			continue
		}
		
		if op == 4 then
		{
			put a
			continue
		}
		
		modes = modes div 10
		
		let j = memory[ PC++ ]
		let b = if modes % 10 then {j} else {memory[ j ]}
		
		if op == 5 then
		{
			if a then
			{
				PC = b
			}
			
			continue
		}
		
		if op == 6 then
		{
			if not bool a then
			{
				PC = b
			}
			
			continue
		}
		
		let k = memory[ PC++ ]
		
		let c = int opcodes[ op ]( a, b )
		
		memory[ k ] = c
	}
}

run 5
