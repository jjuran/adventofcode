#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }
let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

var line = ""
var prompt = ""

display "Booting ASCII..."

var input_queue = begin DATA

def input
{
	let c = *input_queue++
	
	if c != '\n' then
	{
		prompt .= str c
		
		display prompt
	}
	else if not input_queue then
	{
		display "Robot in motion..."
	}
	
	return int c
}

let machine = intcode.machine core

machine.poke( 0, 2 )
machine.connect-input input

for output in receiver machine.run do
{
	if output > 127 then
	{
		display ""
		
		put output
	}
	else
	{
		if output != u8 '\n' then
		{
			line .= str byte output
			
			display line
		}
		else
		{
			prompt = ">>> "
			
			line = ""
		}
	}
}

end.
A,B,A,C,A,B,C,B,C,B
R,10,R,10,R,6,R,4
R,10,R,10,L,4
R,4,L,4,L,10,L,10
n
