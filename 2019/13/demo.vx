#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const intcode = import "intcode"

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()[0]
const core = [data / ','] map int

const machine = intcode.machine core

const Tile_empty  = 0
const Tile_wall   = 1
const Tile_block  = 2
const Tile_paddle = 3
const Tile_ball   = 4

var width  = 1
var height = 1

const grid_size = width * height

var grid = " " * grid_size

def thrice (f)
{
	if (const a = f()) isa () then {return ()}
	
	const b = f()
	const c = f()
	
	return a, b, c
}

var score = ()

const ESC = "\x1b"
const CSI = ESC "["

const CLEAN = CSI "H" CSI "J"  # home, clear to end

const sprites = " X#_o"

var ball_x
var paddle_x
var max_wall_x = 0

var score_box = ""

def update_score
{
	const score_offset = (max_wall_x - "Score: 12345".length) div 2
	const score_indent = " " * score_offset
	
	score_box = score_indent "Score: " score
}

def draw
{
	OUT <== CLEAN
	
	print "\n    " score_box
	print "\n    ".join("", grid / height)
}

def joystick
{
	return ball_x <=> paddle_x
}

machine.poke( 0, 2 )

machine.connect-input joystick

while var tuple = thrice machine.run do
{
	const x, const y, const t = tuple
	
	if x < 0 then
	{
		score = t
		
		update_score()
	}
	else
	{
		if x >= width then
		{
			grid = str ([grid / height] map { v (" " * width) })
			
			width *= 2
		}
		
		if y >= height then
		{
			const dh = y + 1 - height
			
			grid = grid (" " * width * dh)
			
			height += dh
		}
		
		if t == Tile_ball then
		{
			ball_x = x
		}
		else if t == Tile_paddle then
		{
			paddle_x = x
		}
		else if t == Tile_wall then
		{
			max_wall_x = Math.max( x, max_wall_x )
		}
		
		grid[ x + y * width ] = sprites[ t ]
	}
	
	draw()
}
