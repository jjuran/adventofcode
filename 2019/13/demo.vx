#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

let machine = intcode.machine core

let Tile_empty  = 0
let Tile_wall   = 1
let Tile_block  = 2
let Tile_paddle = 3
let Tile_ball   = 4

var height = 1

def thrice (f)
{
	if (let a = f()) isa () then {return ()}
	
	let b = f()
	let c = f()
	
	return a, b, c
}

var score = ()

let ESC = "\x1b"
let CSI = ESC "["

let CLEAN = CSI "H" CSI "J"  # home, clear to end

let RESET = CSI "0m"
let RED   = CSI "31m"
let GREEN = CSI "32m"
let GREY  = CSI "37m"
let AMBER = CSI "93m"
let WHITE = CSI "97m"

def GOTO (x, y)
{
	return CSI (y + 1) ";" (x + 1) "H"
}

let sprites = " X#_*"

var ball_x
var paddle_x
var max_wall_x = 0

var score_box = ""

def update_score
{
	let score_offset = (max_wall_x + 1) div 2 - "Score: ".length
	let score_indent = " " * score_offset
	
	score_box = score_indent WHITE "Score: " AMBER score RESET
}

def joystick
{
	return ball_x <=> paddle_x
}

machine.poke( 0, 2 )

machine.connect-input joystick

OUT <== CLEAN

while var tuple = thrice machine.run do
{
	let (x, y, t) = tuple
	
	if x < 0 then
	{
		score = t
		
		update_score()
		
		OUT <== GOTO(4, 1) score_box GOTO(0, height + 3)
	}
	else
	{
		if y >= height then
		{
			height = y + 1
		}
		
		var color = ""
		
		if t == Tile_ball then
		{
			ball_x = x
			
			color = AMBER
		}
		else if t == Tile_paddle then
		{
			paddle_x = x
			
			color = WHITE
		}
		else if t == Tile_block then
		{
			color = [GREEN, RED][ y % 2 ]
		}
		else if t == Tile_wall then
		{
			max_wall_x = Math.max( x, max_wall_x )
			
			color = GREY
		}
		
		OUT <== GOTO(x + 4, y + 3) color sprites[ t ] RESET GOTO(0, height + 3)
	}
}
