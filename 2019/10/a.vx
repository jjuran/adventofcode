#!/usr/bin/env vx -Z

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const display = (import "status") { OUT <== _ }

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = load input_path

const lines = data.lines()

const grid = str lines

const height = lines.length
const width = grid.length / height

def mark_obstructed_along_ray( gridref, x, y, dx, dy )
{
	var obstructed = false
	
	while (x += dx) in 0 -> width and (y += dy) in 0 -> height do
	{
		const index = x + y * width
		
		if obstructed then
		{
			(*gridref)[ index ] = 'X'
		}
		else if grid[ index ] == '#' then
		{
			obstructed = true
		}
	}
}

def count_asteroids( grid, index )
{
	if grid[ index ] != '#' then
	{
		return 0
	}
	
	const x = index mod width
	const y = index div width
	
	mark_obstructed_along_ray( &grid, x, y,  1,  0 )
	mark_obstructed_along_ray( &grid, x, y, -1,  0 )
	
	mark_obstructed_along_ray( &grid, x, y,  0,  1 )
	mark_obstructed_along_ray( &grid, x, y,  0, -1 )
	
	mark_obstructed_along_ray( &grid, x, y,  1,  1 )
	mark_obstructed_along_ray( &grid, x, y,  1, -1 )
	mark_obstructed_along_ray( &grid, x, y, -1,  1 )
	mark_obstructed_along_ray( &grid, x, y, -1, -1 )
	
	for i in 1 -> width do
	{
		for j in i + 1 -> height do
		{
			if i != 1 and str (j/i) != j "/" i then
			{
				continue
			}
			
			mark_obstructed_along_ray( &grid, x, y,  i,  j )
			mark_obstructed_along_ray( &grid, x, y,  i, -j )
			mark_obstructed_along_ray( &grid, x, y, -i,  j )
			mark_obstructed_along_ray( &grid, x, y, -i, -j )
			
			mark_obstructed_along_ray( &grid, x, y,  j,  i )
			mark_obstructed_along_ray( &grid, x, y,  j, -i )
			mark_obstructed_along_ray( &grid, x, y, -j,  i )
			mark_obstructed_along_ray( &grid, x, y, -j, -i )
		}
	}
	
	return (grid ver {v == '#'}).length - 1
}

var max_count = 0
var max_index = "-"

display "Max: [" max_index "] " max_count

for i in 0 -> grid.length do
{
	const count = count_asteroids( grid, i )
	
	if count > max_count then
	{
		max_count = count
		max_index = i
	}
	
	display "Max: [" max_index "] " max_count " | [" i "] " count
}

display ""

const x = max_index mod width
const y = max_index div width

print max_count

rewrite bindir "/10-pipe.txt" <== rep (x, y), "\n"
