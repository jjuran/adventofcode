#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

let machine = intcode.machine core

var painted_panels = str^[]

var x = 0
var y = 0

var dir = 0  # up/right/down/left

let movements =
[
	[0, -1],
	[1, 0],
	[0, 1],
	[-1, 0],
]

def sample
{
	let key = x "," y
	
	if key in painted_panels then
	{
		return painted_panels[ key ]
	}
	
	return 0
}

while (+) (var c = machine.run sample) do
{
	let d = machine.run()
	
	# paint a cell
	painted_panels[ x "," y ] = c
	
	# turn left or right
	dir = (dir + d * 2 - 1) mod 4
	
	# move
	let m = movements[ dir ]
	
	x += m[ 0 ]
	y += m[ 1 ]
}

put painted_panels.length
