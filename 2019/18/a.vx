#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const display = (import "status") { OUT <== _ }

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = load input_path

const lines = data.lines()

const width  = lines[ 0 ].length
const height = lines.length

const image = str lines

const upper = packed ('A' .. 'Z')
const lower = packed ('a' .. 'z')

def isalpha (c)
{
	return c in upper lower
}

const dirs =
[
	[  0, -1 ],  # N
	[  0,  1 ],  # S
	[ -1,  0 ],  # W
	[  1,  0 ],  # E
]

def find (c)
{
	const p = (begin image).find c
	
	return if p then {p.past.length}
}

# Nothing can be at (0,0), because that's a wall.

const start = find '@'

var all_keys  = [ 0 (*) 26 ]
var all_doors = [ 0 (*) 26 ]

var n_keys = 0

for k in 'a' .. 'z' do
{
	const i = find k
	
	if i isa () then {break}
	
	all_keys[ u8 k - u8 'a' ] = i
	
	++n_keys
}

all_keys = all_keys[ 0 -> n_keys ]

var n_doors = 0

for D in 'A' .. 'Z' do
{
	if const i = find D then
	{
		all_doors[ u8 D - u8 'A' ] = i
		
		++n_doors
	}
}

def compose (x, y)
{
	return x + y * width
}

def decompose (i)
{
	return i mod width, i div width
}

def neighbors (i)
{
	const x, const y = decompose i
	
	return dirs map { [v[0] + x, v[1] + y] }
	            ver { v[0] in 0 -> width and v[1] in 0 -> height }
	            map { compose *v }
}

def valid_moves (i)
{
	return neighbors i ver { image[ v ] != '#' }
}

var distances = str^[]

var beyond = byte^[]
var pathto = byte^[]

var optimal_paths = [ str^[] (*) n_keys ]

def compute_distances_from_start (dungeon, start, path)
{
	const A = dungeon[ start ]
	
	display "Distances from start: " path
	
	if not A in beyond.keys then
	{
		beyond[ A ] = []
	}
	
	dungeon[ start ] = '+'
	
	var frontier = [start]
	
	var distance = 0
	
	while frontier do
	{
		var new_frontier = []
		
		for edge in frontier do
		{
			const c = dungeon[ edge ]
			
			if isalpha c then
			{
				beyond[ A ] <-- c => distance
				
				if not c in beyond.keys then
				{
					pathto[ c ] = ""
				}
				
				pathto[ c ] = path
				
				distances[ str (A, c) ] = distance
				distances[ str (c, A) ] = distance
				
				compute_distances_from_start( dungeon, edge, path c )
				continue
			}
			
			dungeon[ edge ] = '+'
			
			const moves = valid_moves edge ver { dungeon[ v ] != '+' }
			
			new_frontier <-- *moves
		}
		
		++distance
		
		frontier = new_frontier
	}
}

def path_between (A, B)
{
	assert A != B
	
	const b = pathto[ B ]
	
	if A == '@' then
	{
		return b B
	}
	
	const a = pathto[ A ]
	
	var p = begin a
	var q = begin b
	
	while p and q and *p == *q do
	{
		++p, ++q
	}
	
	return A -p.rest q.rest B
}

def distance_between (A, B)
{
	const key = str _
	
	if key in distances.keys then
	{
		return distances[ key ]
	}
	
	var distance = 0
	
	var p = begin path_between _
	var q = p + 1
	
	while q do
	{
		const a = *p++
		const b = *q++
		
		if a == b then {continue}
		
		const subkey = str (a, b)
		
		const d =
			if subkey in distances.keys
				then {distances[ subkey ]}
				else {distance_between (a, b)}
		
		distance += d
	}
	
	return distances[ key ] = distance
}

def valid_path (path)
{
	var p = begin path
	
	while p do
	{
		const c = *p++
		
		if c in upper then
		{
			const k = byte (u8 c + 0x20)
			
			if not k in p.past then
			{
				return false
			}
		}
	}
	
	return true
}

def full_path (sequence)
{
	var p = begin sequence
	var q = p + 1
	
	var path = ""
	
	while q do
	{
		path = path path_between( *p++, *q++ )
	}
	
	return path
}

def measure_path (A, sequence)
{
	if not valid_path full_path sequence then
	{
		return ()
	}
	
	var distance = 0
	
	var p = begin A sequence
	var q = p + 1
	
	while q do
	{
		distance += distance_between (*p++, *q++)
	}
	
	display "Path " sequence ": " distance
	
	return distance
}

def keys_beyond_door (unlocked, door)
{
	const beyond_door = (byte^beyond[ door ]).keys
	
	const keys  = str (beyond_door ver {v in lower})
	const doors = str (beyond_door ver {v in unlocked})
	
	return str (keys, doors map keys_beyond_door % unlocked)
}

def keys_beyond_path (path)
{
	const unlocked = translated( path, lower, upper )
	
	const last = (-path)[ 0 ]
	
	if last in upper then
	{
		# If a path ends with a door, then what follows must be beyond it.
		
		return keys_beyond_door( unlocked, last )
	}
	
	path = "@" path
	
	var possible_keys = "\0" * 26
	
	for k in path do
	{
		for b in beyond[ k ] do
		{
			if b.key in lower then
			{
				possible_keys[ u8 b.key - u8 'a' ] = b.key
			}
			else
			{
				for k in keys_beyond_door( unlocked, b.key ) do
				{
					possible_keys[ u8 k - u8 'a' ] = k
				}
			}
		}
	}
	
	translate( &possible_keys, path, "\0" * path.length )
	
	return str (possible_keys ver ...)
}

def compute_optimal_paths (n)
{
	--n
	
	for subpath in (optimal_paths[ n - 1 ].values map .key) do
	{
		const subkey = str Iter.sorted [*subpath]
		
		for k in keys_beyond_path subpath do
		{
			const path = subpath k
			const key  = subkey  k
			const len  = measure_path( '@', path )
			
			if len and (not key in optimal_paths[ n ] or len < optimal_paths[ n ][ key ].value) then
			{
				optimal_paths[ n ][ key ] = path => len
			}
		}
	}
	
	optimal_paths[ n - 1 ] = null
}

def compute_distances_from (start)
{
	const A = image[ start ]
	
	display "Distances from " A
	
	assert not A in "#."
	
	var copy = image
	
	copy[ start ] = '+'
	
	var leads = [start]
	
	var distance = 0
	
	while leads do
	{
		var new_leads = []
		
		for lead in leads do
		{
			const c = copy[ lead ]
			
			copy[ lead ] = '+'
			
			if isalpha c then
			{
				distances[ str (A, c) ] = distance
				continue
			}
			
			const moves = valid_moves lead ver { copy[ v ] != '+' }
			
			new_leads <-- *moves
		}
		
		++distance
		
		leads = new_leads
	}
}

compute_distances_from_start( image, start, "" )

def precompute_distances
{
	compute_distances_from start
	
	for k in all_keys do
	{
		compute_distances_from k
	}
	
	for D in (all_doors ver ...) do
	{
		compute_distances_from D
	}
}

precompute_distances()

for k1 in (beyond[ '@' ] ver { v.key in lower }) do
{
	const path = str k1.key
	
	optimal_paths[ 0 ][ path ] = path => k1.value
}

for opt in 2 .. optimal_paths.length do
{
	compute_optimal_paths opt
}

const best = Iter.min (optimal_paths[ optimal_paths.length - 1 ] map { v.value.value })

display ""

print best

const solutions = optimal_paths[ optimal_paths.length - 1 ] ver { v.value.value == best }
const knowledge = str (solutions map {v.value.key "\n"})

const fd = getenv "KNOWLEDGE_OUTPUT_FD" or OUT

fd <== knowledge

end.
