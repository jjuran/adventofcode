#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]

let digits = packed (   '0' ..    '9')
let values = packed ('\x00' .. '\x09')

var signal = translated( data, digits, values )

let N = signal.length

def zipmulsum (signal, i)
{
	signal = "+" signal
	++i
	
	let Nmod = N div i * i
	
	var sum = 0
	
	let leading_zeros = i - 1
	let skip = 1 + leading_zeros
	
	var j = skip
	
	let inc = 2 * i
	
	while j <= N do
	{
		for cpos in signal[ j -> Math.min( j + i, N + 1 ) ] do
		{
			sum += int cpos
		}
		
		j += inc
		
		if j > N then {break}
		
		for cneg in signal[ j -> Math.min( j + i, N + 1 ) ] do
		{
			sum -= int cneg
		}
		
		j += inc
	}
	
	return sum
}

def fft (signal)
{
	let half_N = N div 2
	
	for i in 0 -> half_N do
	{
		signal[ i ] = byte (abs zipmulsum( signal, i ) % 10)
	}
	
	# second half
	
	# last digit remains the same
	
	for i2 in -(N - 2) .. -half_N do
	{
		signal[ -i2 ] = byte ((u8 signal[ -i2 ] + u8 signal[ -i2 + 1 ]) % 10)
	}
	
	return signal
}

for i in 0 -> 100 do
{
	display "" i
	
	signal = fft signal
}

display ""

let output = signal[ 0 -> 8 ]

put translated( output, values, digits )
