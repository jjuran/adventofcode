#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let display = (import "status") { OUT <== _ }

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]

let digits = packed (   '0' ..    '9')
let values = packed ('\x00' .. '\x09')

let offset = int data[ 0 -> 7 ]

var signal = translated( data, digits, values )

signal = signal * 10^4

let N = signal.length

def fft (signal)
{
	# second half
	
	# last digit remains the same
	
	for i2 in -(N - 2) .. -offset do
	{
		signal[ -i2 ] = byte ((u8 signal[ -i2 ] + u8 signal[ -i2 + 1 ]) % 10)
	}
	
	return signal
}

for i in 0 -> 100 do
{
	display "" i
	
	signal = fft signal
}

display ""

let output = substr( signal, offset, 8 )

put translated( output, values, digits )
