#!/usr/bin/env vx

const bindir = dirname realpath argv[ 0 ]

const data = (load bindir "/3.txt").lines()
#const data = DATA.lines()

const one, const two = *(data map { [v / ','] })

def segments (path)
{
	var x = 0
	var y = 0
	
	var horizontal = []
	var vertical   = []
	
	for move in path do
	{
		const dir = move[ 0 ]
		
		var inc = int substr( move, 1 )
		
		const segment
		
		if dir == 'L' then
		{
			const x0 = x
			x -= inc
			
			horizontal <-- [ x, y, x0 ]
		}
		
		if dir == 'R' then
		{
			const x0 = x
			x += inc
			
			horizontal <-- [ x0, y, x ]
		}
		
		if dir == 'D' then
		{
			const y0 = y
			y -= inc
			
			vertical <-- [ x, y, y0 ]
		}
		
		if dir == 'U' then
		{
			const y0 = y
			y += inc
			
			vertical <-- [ x, y0, y ]
		}
	}
	
	return horizontal, vertical
}

def cross (h, v)
{
	const x0, const y, const x1 = *h
	const x, const y0, const y1 = *v
	
	assert x0 <= x1
	assert y0 <= y1
	
	if x in x0 .. x1 and y in y0 .. y1 then
	{
		return [x, y]
	}
	
	return []
}

def crossings( hs, vs )
{
	var result = []
	
	for h in hs do
	{
		for v in vs do
		{
			if const x = cross( h, v ) then
			{
				result <-- x
			}
		}
	}
	
	return result
}

def distance (coord)
{
	return coord map abs per Math.sum
}

const ah, const av = segments one
const bh, const bv = segments two

const intersects =
[
	*crossings( ah, bv ),
	*crossings( bh, av ),
]

const distances = intersects map distance ver ...

const minimum = distances per Math.min

print minimum

end.
R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51
U98,R91,D20,R16,D67,R40,U7,R15,U6,R7
