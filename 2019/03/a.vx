#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

let (one, two) = *(data map { [v / ','] })

def segments (path)
{
	var x = 0
	var y = 0
	
	var horizontal = []
	var vertical   = []
	
	for move in path do
	{
		let dir = move[ 0 ]
		
		var inc = int substr( move, 1 )
		
		if dir == 'L' then
		{
			let x0 = x
			x -= inc
			
			horizontal <-- [ x, y, x0 ]
		}
		
		if dir == 'R' then
		{
			let x0 = x
			x += inc
			
			horizontal <-- [ x0, y, x ]
		}
		
		if dir == 'D' then
		{
			let y0 = y
			y -= inc
			
			vertical <-- [ x, y, y0 ]
		}
		
		if dir == 'U' then
		{
			let y0 = y
			y += inc
			
			vertical <-- [ x, y0, y ]
		}
	}
	
	return horizontal, vertical
}

def cross (h, v)
{
	let (x0, y, x1) = *h
	let (x, y0, y1) = *v
	
	assert x0 <= x1
	assert y0 <= y1
	
	if x in x0 .. x1 and y in y0 .. y1 then
	{
		return [x, y]
	}
	
	return []
}

def crossings( hs, vs )
{
	var result = []
	
	for h in hs do
	{
		for v in vs do
		{
			if let x = cross( h, v ) then
			{
				result <-- x
			}
		}
	}
	
	return result
}

def distance (coord)
{
	return coord map abs per Math.sum
}

let (ah, av) = segments one
let (bh, bv) = segments two

let intersects =
[
	*crossings( ah, bv ),
	*crossings( bh, av ),
]

let distances = intersects map distance ver ...

let minimum = Iter.min distances

put minimum
