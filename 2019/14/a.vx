#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def parse (measure)
{
	let (n, name) = measure / ' '
	
	return name => int n
}

var recipes = str^[]
var needs  = str^[]

for row in data do
{
	var p = (begin row).find " => "
	
	let reagents = p.past
	let product = parse (p + 4).rest
	
	let factors = [" " reagents / ','] map { parse substr(v, 1) }
	
	recipes[ product.key ] = [ product.value, factors ]
	
	needs[ product.key ] = 0
}

needs[ "ORE" ] = 0
needs[ "FUEL" ] = 1

while needs ver {v.value > 0 and v.key != "ORE"} do
{
	for need in (needs ver {v.value > 0}) do
	{
		let name = need.key
		
		if name == "ORE" then
		{
			continue
		}
		
		let needed = needs[ name ]
		
		let r = recipes[ name ]
		
		let n = r[ 0 ]
		
		let coefficient = (needed + n - 1) div n
		
		let factors = r[ 1 ]
		
		for f in factors do
		{
			needs[ f.key ] += f.value * coefficient
		}
		
		needs[ name ] -= n * coefficient
	}
}

put needs[ "ORE" ]
