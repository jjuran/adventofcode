#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../lib/"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()

def parse (measure)
{
	let (n, name) = measure / ' '
	
	return name => int n
}

var recipes = str^[]
var needs_0 = str^[]

for row in data do
{
	var p = (begin row).find " => "
	
	let reagents = p.past
	let product = parse (p + 4).rest
	
	let factors = [" " reagents / ','] map { parse substr(v, 1) }
	
	recipes[ product.key ] = [ product.value, factors ]
	needs_0[ product.key ] = 0
}

needs_0[ "ORE" ] = 0

def fuel_cost (fuel)
{
	var needs = needs_0
	
	needs[ "FUEL" ] = fuel
	
	while needs ver {v.value > 0 and v.key != "ORE"} do
	{
		for need in (needs ver {v.value > 0}) do
		{
			let name = need.key
			
			if name == "ORE" then
			{
				continue
			}
			
			let needed = needs[ name ]
			
			let r = recipes[ name ]
			
			let n = r[ 0 ]
			
			let coefficient = (needed + n - 1) div n
			
			let factors = r[ 1 ]
			
			for f in factors do
			{
				needs[ f.key ] += f.value * coefficient
			}
			
			needs[ name ] -= n * coefficient
		}
	}
	
	return needs  # positive ORE, negative leftovers
}

var n = 1

var needs = fuel_cost 1

var min_fuel = 0
var max_fuel = -1

while min_fuel != max_fuel do
{
	var needs = fuel_cost n
	
	if needs[ "ORE" ] > 1000000000000 then
	{
		max_fuel = n - 1
		
		n = min_fuel + (max_fuel - min_fuel) div 2
	}
	else if max_fuel > 0 then
	{
		min_fuel = n
		
		n = min_fuel + (max_fuel - min_fuel + 1) div 2
	}
	else
	{
		min_fuel = n
		
		n *= 2
	}
}

put n
