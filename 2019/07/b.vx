#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const permute = (import "permute").permute

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()[0]
const core = [data / ','] map int

def less   (a, b) {a < b}
def equals (a, b) {a == b}

const opcodes = [ 0, Math.sum, Math.product, 3, 4, 5, 6, less, equals ]

def shift (arrayref)
{
	const values = *arrayref
	
	const v = values[ 0 ]
	
	*arrayref = values[ 1 -> values.length ]
	
	return v
}

def IntCode_machine (init)
{
	var inputs = [init]
	var output = ()
	var memory = core
	var halted = false
	
	var PC = 0
	
	def input (v)
	{
		inputs <-- v
	}
	
	def step
	{
		const opcode = memory[ PC++ ]
		
		const op = opcode % 100
		
		var modes = opcode div 100
		
		if op == 99 then
		{
			halted = true
			return false
		}
		
		const i = memory[ PC++ ]
		const a = if modes % 10 then {i} else {memory[ i ]}
		
		if op == 3 then
		{
			const ok = inputs.length > 0
			
			if ok then
			{
				memory[ i ] = shift &inputs
			}
			
			return ok
		}
		
		if op == 4 then
		{
			output = a
			return false
		}
		
		modes = modes div 10
		
		const j = memory[ PC++ ]
		const b = if modes % 10 then {j} else {memory[ j ]}
		
		if op == 5 then
		{
			if a then
			{
				PC = b
			}
			
			return true
		}
		
		if op == 6 then
		{
			if not bool a then
			{
				PC = b
			}
			
			return true
		}
		
		const k = memory[ PC++ ]
		
		const c = int opcodes[ op ]( a, b )
		
		memory[ k ] = c
		
		return true
	}
	
	def run
	{
		while step() do
		{
			continue
		}
		
		return if not halted then {output}
	}
	
	return record( :input, :run )
}

def full_run (phases)
{
	const amps = phases map IntCode_machine
	
	const n = amps.length
	
	var i = 0
	
	var output
	var signal = 0
	
	while (+) signal do
	{
		output = signal  # Will be overwritten until a machine is halted
		
		amps[ i ].input signal
		
		signal = amps[ i ].run()
		
		i = (i + 1) % n
	}
	
	return output
}

const outputs = permute [*(5 .. 9)] map full_run

print Iter.max outputs
