#!/usr/bin/env lvx

const bindir = dirname realpath argv[ 0 ]
const libdir = bindir "/../../lib/"

const import = { const path = libdir _ ".vsl"; eval( load path, path ) }

const permutations = (import "permute").permutations

const input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

const data = (load input_path).lines()[0]
const core = [data / ','] map int

def less   (a, b) {a < b}
def equals (a, b) {a == b}

const opcodes = [ 0, Math.sum, Math.product, 3, 4, 5, 6, less, equals ]

def run (inputs)
{
	var input = begin inputs
	
	var memory = core
	
	var PC = 0
	
	while true do
	{
		const opcode = memory[ PC++ ]
		
		const op = opcode % 100
		
		var modes = opcode div 100
		
		if op == 99 then
		{
			break
		}
		
		const i = memory[ PC++ ]
		const a = if modes % 10 then {i} else {memory[ i ]}
		
		if op == 3 then
		{
			memory[ i ] = *input++
			continue
		}
		
		if op == 4 then
		{
			return a
		}
		
		modes = modes div 10
		
		const j = memory[ PC++ ]
		const b = if modes % 10 then {j} else {memory[ j ]}
		
		if op == 5 then
		{
			if a then
			{
				PC = b
			}
			
			continue
		}
		
		if op == 6 then
		{
			if not bool a then
			{
				PC = b
			}
			
			continue
		}
		
		const k = memory[ PC++ ]
		
		const c = int opcodes[ op ]( a, b )
		
		memory[ k ] = c
	}
	
	warn "not reached?"
}

def full_run (phases)
{
	var input = 0
	
	var p = begin phases
	
	while p do
	{
		input = run [*p++, input]
	}
	
	return input
}

const outputs = permutations 5 map full_run

print Iter.max outputs
