#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

let import = { let path = libdir _ ".vsl"; eval( load path, path ) }

let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

var input_queue = begin DATA

def input
{
	let c = *input_queue++
	
	OUT <== c
	
	return int c
}

let machine = intcode.machine core

machine.connect-input input

for output in receiver machine.run do
{
	if output < 128 then
	{
		OUT <== byte output
	}
	else
	{
		put output
	}
}

# not (A and B and C) and D

end.
OR A J
AND B J
AND C J
NOT J J
AND D J
WALK
