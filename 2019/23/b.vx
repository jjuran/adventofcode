#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vsl" }

let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

let N = 50

let all_ids = 0 -> N

let Idle = '-'
let Ready = '*'
let Running = '!'

var input_queues = all_ids map {[ v ]}

var status = str Ready * N

var NAT_packet = ()

var last_Y_sent_by_NAT = ()

var T = time()

def debug (s)
{
	let t = time() - T
	
	OUT <== "\r" t ": " s
}

def info (s)
{
	let t = time() - T
	
	put "\r" (" " * 80) "\r" t ": " s
}

def check_idle
{
	if status == str Idle * N then
	{
		if NAT_packet then
		{
			let Y = tail NAT_packet
			
			if Y == last_Y_sent_by_NAT then
			{
				info "\n" Y
				
				OUT <== x"070707"
				exit 0
			}
			
			info "Sending " rep(NAT_packet) " from NAT to #0"
			
			status[ 0 ] = Ready
			
			debug status
			
			input_queues[ 0 ] <-- NAT_packet
			
			NAT_packet = ()
			
			last_Y_sent_by_NAT = Y
		}
		else
		{
			info "No NAT packet!"
			
			debug status
		}
	}
}

def new_machine (id)
{
	def input
	{
		if let len = input_queues[ id ].length then
		{
			let next = input_queues[ id ][ 0 ]
			
			input_queues[ id ] = input_queues[ id ][ 1 -> len ]
			
			return next
		}
		else
		{
			let was_idle = status[ id ] == Idle
			
			status[ id ] = Idle
			
			debug status
			
			check_idle()
			
			if was_idle then
			{
				return ()
			}
			
			return -1
		}
	}
	
	let machine = intcode.machine core
	
	machine.connect-input input
	
	return id => machine
}

var machines = all_ids map new_machine

def run (id)
{
	status[ id ] = Running
	
	debug status
	
	let machine = machines[ id ].value
	
	while true do
	{
		let output = machine.run()
		
		if output isa () then
		{
			info "Machine " id " halted"
			break
		}
		else if output isa null then
		{
			break
		}
		else
		{
			let dst = output
			
			let x = machine.run()
			let y = machine.run()
			
			if dst == 255 then
			{
				NAT_packet = x, y
				info "Sending " rep(x, y) " from #" id " to NAT"
			}
			else
			{
				info "Sending " rep(x, y) " from #" id " to #" dst
				
				status[ dst ] = Ready
				
				input_queues[ dst ] <-- (x, y)
			}
			
			debug status
		}
	}
}

while true do
{
	let runnable = (all_ids ver { input_queues[ v ] }) or all_ids
	
	for id in runnable do
	{
		run id
	}
}
