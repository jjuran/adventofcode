#!/usr/bin/env lvx

let bindir = dirname realpath argv[ 0 ]
let libdir = bindir "/../../lib/"

def import (lib) { eval (load, realpath) libdir lib ".vy" }

let intcode = import "intcode"

let input_path = if argc > 1 then {argv[ 1 ]} else {bindir "/input.txt"}

let data = (load input_path).lines()[0]
let core = [data / ','] map int

let dirs = str^
[
	north: [0, 1],
	south: [0, -1],
	east:  [-1, 0],
	west:  [1, 0],
]

var input_queue = begin DATA

var output_queue = ""

def input
{
	return
	if input_queue then
	{
		let c = *input_queue++
		
		OUT <== c
		
		int c,
	}
}

let machine = intcode.machine core

machine.connect-input input

def run_command (s)
{
	input_queue = begin s "\n"
	
	var output_queue = ""
	
	for output in receiver machine.run do
	{
		if output isa null then
		{
			return output_queue
		}
		
		if output < 128 then
		{
			OUT <== byte output
			
			output_queue .= str byte output
		}
	}
	
	return output_queue
}

# Phase 0

for command in DATA.lines() do
{
	run_command command
}

let objects =
[
	"fuel cell",
	"easter egg",
	"cake",
	"ornament",
	"hologram",
	"dark matter",
	"klein bottle",
	"hypercube",
]

for o in objects do
{
	run_command "drop " o
}

let saved_machine_state = machine.suspend()

def find_passcode (s)
{
	let prompt = "get in by typing "
	
	var p = (begin s).find prompt
	
	return if p then { p += prompt.length; (p.find " on the keypad") - p }
}

def attempt (bits)
{
	put ""
	put "Object set #" bits
	put ""
	
	machine.resume saved_machine_state
	
	var carried = []
	
	for b in 0 -> 8 do
	{
		let k = 2^(7 - b)
		
		if bits >= k then
		{
			bits -= k
			carried <-- objects[ b ]
			
			run_command "take " objects[ b ]
		}
	}
	
	let response = run_command "west"
	
	if let passcode = find_passcode response then
	{
		put "\n" "Carrying: " rep carried
		
		put "\n    Main airlock passcode:  " passcode "\n"
	}
}

attempt 0b01001110  # 0x4e, 78: easter egg, hologram, dark matter, klein bottle

end.
south
west
take fuel cell
west
take easter egg
east
east
north
north
north
east
east
take cake
west
west
south
south
east
take ornament
east
take hologram
east
take dark matter
north
north
east
take klein bottle
north
take hypercube
north
